"use strict";(globalThis.webpackChunkmy_website=globalThis.webpackChunkmy_website||[]).push([[4665],{4686:e=>{e.exports=JSON.parse('{"permalink":"/blog/triple-fantasy-deepdive","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-06-24-triple-fantasy-deepdive.md","source":"@site/blog/2024-06-24-triple-fantasy-deepdive.md","title":"Malware Deep Dive \u2013 Equation Triple Fantasy","description":"<img","date":"2024-06-24T00:00:00.000Z","tags":[{"inline":false,"label":"Analysis","permalink":"/blog/tags/analysis","description":"Articles focused on analysis"},{"inline":false,"label":"Threat Intelligence","permalink":"/blog/tags/threat-intelligence","description":"Posts related to threat intelligence"},{"inline":false,"label":"Tools","permalink":"/blog/tags/tools","description":"Forensic tools and utilities"}],"readingTime":15.54,"hasTruncateMarker":true,"authors":[{"name":"Paige Haines","title":"Cyber Security Analyst","url":"https://linkedin.com/in/paigehai","page":{"permalink":"/blog/authors/paigehai"},"socials":{"linkedin":"https://www.linkedin.com/in/paigehai/","github":"https://github.com/paigehai"},"imageURL":"https://github.com/paigehai.png","key":"paigehai"}],"frontMatter":{"slug":"triple-fantasy-deepdive","title":"Malware Deep Dive \u2013 Equation Triple Fantasy","authors":["paigehai"],"tags":["analysis","threat intelligence","tools"],"date":"2024-06-24T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Problems of Employee Security Insensibility","permalink":"/blog/employee-security-insensibility"}}')},8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>l});var s=t(6540);const n={},a=s.createContext(n);function r(e){const i=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(a.Provider,{value:i},e.children)}},8514:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var s=t(4686),n=t(4848),a=t(8453);const r={slug:"triple-fantasy-deepdive",title:"Malware Deep Dive \u2013 Equation Triple Fantasy",authors:["paigehai"],tags:["analysis","threat intelligence","tools"],date:new Date("2024-06-24T00:00:00.000Z")},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. Analytical Tools",id:"2-analytical-tools",level:2},{value:"2.1 Methodology",id:"21-methodology",level:3},{value:"2.1.1 Fingerprinting the Malware",id:"211-fingerprinting-the-malware",level:4},{value:"2.1.2 File Type and Headers",id:"212-file-type-and-headers",level:4},{value:"2.1.3. Finding Malicious Artefacts",id:"213-finding-malicious-artefacts",level:4},{value:"3 Static Analysis",id:"3-static-analysis",level:2},{value:"3.1 Fingerprinting the Malware",id:"31-fingerprinting-the-malware",level:3},{value:"3.2 Analysing the File Type",id:"32-analysing-the-file-type",level:3},{value:"3.3 Finding Malicious Artefacts: URLs",id:"33-finding-malicious-artefacts-urls",level:4},{value:"3.3.1 Finding Malicious Artefacts: Files",id:"331-finding-malicious-artefacts-files",level:4},{value:"3.3.2 Finding Malicious Artefacts: Packing",id:"332-finding-malicious-artefacts-packing",level:4},{value:"3.3.3 Finding Malicious Artefacts: Code",id:"333-finding-malicious-artefacts-code",level:4},{value:"4. Conclusion",id:"4-conclusion",level:2},{value:"4.1 References",id:"41-references",level:2}];function h(e){const i={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("div",{style:{textAlign:"center"},children:(0,n.jsx)("img",{src:"/blog/malware-thumb.png",alt:"Malware Deep Dive Thumbnail",style:{width:"100%",maxWidth:"500px",height:"auto"}})}),"\n",(0,n.jsx)(i.p,{children:"An investigation into one part of the highly sophisticated Equation Group APT."}),"\n",(0,n.jsxs)(i.p,{children:["Earlier this year, I was afforded the pleasure of undertaking a static analysis of the ",(0,n.jsx)(i.strong,{children:"Triple Fantasy"})," malware. I am a firm believer that hands-on experience with these types of exercises is crucial in understanding how malware works and how it spreads due to human error."]}),"\n",(0,n.jsx)(i.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,n.jsx)(i.p,{children:"Trojan's are sophisticated in that they can evade detection from users very easily, due to technical and complex obfuscation methods employed. My objective for this static analysis is to dissect Triple Fantasy Trojan and develop my understanding for how these particular viruses work in a safe virtual machine environment. This static analysis serves as a starting point for the development of my skills utilising a virtual machine and is a representation of my personal endeavour to contribute to discussions on topics that are still new to me."}),"\n",(0,n.jsx)(i.p,{children:"By the conclusion of this analysis, a list of responses to the following questions will be provided:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"What is the file type?"})," Different file types have different behaviours and characteristics so understanding the file type can give insight into how it might behave and what potential vulnerabilities it may exploit."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Does the file have a packer?"})," Packed files are created to evade detection from programs like Microsoft Defender and Malwarebytes, so identifying if the sample is packed is really crucial in determining if it's malicious and contains more information that we are unable to see until the sample is unpacked."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Are there any suspicious strings in the file?"})," Malware often contains strings that can reveal certain information about its intent or origins, so by searching for suspicious looking strings it can give us clues about the sample\u2019s intentions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Are there any encoded strings?"})," Encoded strings are another common technique used by malware to obfuscate its code. By identifying and decoding these strings, we can discover more information about the sample."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"If the malware is packed, how do we unpack it?"})," The sample file can be unpacked through malware analytic tool Exeinfo PE which provides information on how to unpack the file. By unpacking the file, we are able to explore the full extent of the sample with all the additional code exposed."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Is the file definitively malware?"})," Regardless of the fact that malware has been specifically sought, this still requires a complete analysis to ensure what is being identified can be confirmed as being malware."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"The objective of this analysis is to comprehensively address all questions and present a succinctly formatted, readable report."}),"\n",(0,n.jsx)(i.h2,{id:"2-analytical-tools",children:"2. Analytical Tools"}),"\n",(0,n.jsx)(i.p,{children:"This report has been produced with the assistance of a host of analytical malware tools that have allowed the identification of various mechanisms of the Triple Fantasy malware. Such mechanisms that will be explored include decoded strings, and Dynamic Link Library methods calls that signify the files malicious intent and payload. Tools such as pestudio, cmder, in conjunction with commands such as floss and capa have been utilised to create the evidence that you will read in this report."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"https://www.virustotal.com",children:(0,n.jsx)(i.strong,{children:"VirusTotal"})}),": file inspection via antivirus engines"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"pestudio"}),": categorized structure and metadata analysis"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"HxD"}),": hex editor for identifying file headers"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"cmder"}),": terminal emulator for command-line tools"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"floss"}),": function-level string extraction"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"capa"}),": detects capabilities and malware behaviors"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Exeinfo PE"}),": helps detect packers and unpacking methods"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["All analysis was performed on the file ",(0,n.jsx)(i.code,{children:"TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386"})," using a Windows 10 VM with the FLARE-VM toolkit for safety and snapshot support."]}),"\n",(0,n.jsx)(i.h3,{id:"21-methodology",children:"2.1 Methodology"}),"\n",(0,n.jsx)(i.h4,{id:"211-fingerprinting-the-malware",children:"2.1.1 Fingerprinting the Malware"}),"\n",(0,n.jsxs)(i.p,{children:["The sample will be scanned using ",(0,n.jsx)(i.a,{href:"https://www.virustotal.com",children:"VirusTotal"}),"."]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"Win32/Trojan"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"Packed.Win32"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"Dropper.Generic"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This immediate red flag validated that further analysis was necessary."}),"\n",(0,n.jsx)(i.h4,{id:"212-file-type-and-headers",children:"2.1.2 File Type and Headers"}),"\n",(0,n.jsx)(i.p,{children:"Using HxD, I will analyse the file type to understand its purpose."}),"\n",(0,n.jsx)(i.h4,{id:"213-finding-malicious-artefacts",children:"2.1.3. Finding Malicious Artefacts"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"URL Artefacts"}),": pestudio > cmder (\u201cfloss malware.exe > output.txt\u201d: search for \u2018http\u2019, \u2018.com\u2019, \u2018.net\u2019 etc.)"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"File Artefacts"}),": pestudio: .dll files"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Packing Artefacts (Raw vs Virtual Size)"}),": pestudio"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Code Artefacts"}),": capa: cd Desktop, capa, capa -v, capa -vv"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"3-static-analysis",children:"3 Static Analysis"}),"\n",(0,n.jsx)(i.p,{children:"A static analysis is the process of analysing a sample without actually detonating the sample, through various analysis methods. This includes observing the code for any irregularities or suspicious information as well as signs of malicious intent within its function calls."}),"\n",(0,n.jsx)(i.h3,{id:"31-fingerprinting-the-malware",children:"3.1 Fingerprinting the Malware"}),"\n",(0,n.jsx)(i.p,{children:"Upon deciding on the tools that will be needed for this static analysis, the first step is to utilise VirusTotal to gain an understanding of the file details through antivirus scanning. This analysis can provide us with details regarding the files PE header, hash identifiers, and its programming language. Figure 1 demonstrates this step."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware1.png",alt:"Malware Analysis 1",style:{width:"100%",maxWidth:"1000px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 1: VirusTotal.com scan of sample malware"})]}),"\n",(0,n.jsx)(i.p,{children:"The above figure displays an interface where after the sample was submitted, the VirusTotal antivirus engines provided additional details as to what may be contained within the infected file. Identifiers such as \u201cTrojan\u201d, \u201cEquation\u201d, and \u201cTripleFantasy\u201d, indicate that these engines have correlated the contents of the file to known malware. This result demonstrates that the sample is indeed malware of some kind."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware2.png",alt:"Malware Analysis 2",style:{width:"100%",maxWidth:"1000px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 2: \u2018Details\u2019 tab of VirusTotal scan"})]}),"\n",(0,n.jsx)(i.p,{children:"VirusTotal\u2019s \u2018Details\u2019 tab provides us with some additional information with regards to the sample, in particular its hash identifiers which consist of the following:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"9180d5affe1e5df0717d7385e7f54386"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"4ce6e77a11b443cc7cbe439b71bf39a39d3d7fa3"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"24b7e7553b1aa241997e28775d3952c4cb885056c4606cbed9b450320b601255"})}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This tab also gives information with regards to the type of executable the sample is, which is a portable executable file in 32-bit format. Included in this is a list of all the file names that have been recorded since the files inception. The file name corresponding to my sample is the following:"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386"})}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware3.png",alt:"Malware Analysis 3",style:{width:"100%",maxWidth:"300px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 3: Malware history details"})]}),"\n",(0,n.jsx)(i.p,{children:"This VirusTotal scan shows that the first time this sample was seen \u201cin the wild\u201d was on 2016-11-25, and the file version is 0.1.2.6 (pictured in Figure 4) with an original name of ahlhcib.dll."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware4.png",alt:"Malware Analysis 4",style:{width:"100%",maxWidth:"200px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 4: File version shown in pestudio"})]}),"\n",(0,n.jsx)(i.h3,{id:"32-analysing-the-file-type",children:"3.2 Analysing the File Type"}),"\n",(0,n.jsx)(i.p,{children:"The HxD analysis tool has provided some key information with regards to the type of file that the sample is. Denoted through the use of the hexadecimal characters \u20184D\u2019, \u20185A\u2019, as well as the \u2018MZ\u2019 header on the right panel, the sample is an executable file."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware5.png",alt:"Malware Analysis 5",style:{width:"100%",maxWidth:"600px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 5: HxD analysis of file with file identifiers"})]}),"\n",(0,n.jsx)(i.p,{children:"This concludes the fingerprint analysis portion of the report. We have successfully identified the file type, the hash identifiers, file history, and entropy. This serves as the foundation for the remainder of the analysis, of which we will utilise this information to extract more from the sample through more advanced tools."}),"\n",(0,n.jsx)(i.h4,{id:"33-finding-malicious-artefacts-urls",children:"3.3 Finding Malicious Artefacts: URLs"}),"\n",(0,n.jsx)(i.p,{children:"Utilising pestudio I analysed the sample for any indication of a URL through the various segments of information on the left-hand side of the program (pictured in Figure 5). As demonstrated in my video analysis, I was unable to find a link to a website through this method."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware6.png",alt:"Malware Analysis 6",style:{width:"100%",maxWidth:"200px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 6: Left-hand side panel of pestudio"})]}),"\n",(0,n.jsx)(i.p,{children:"To ensure that no items were being missed, I proceeded to conduct an analysis using cmder and the \u2018floss\u2019 command. By inputting this code:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"floss C:\\Users\\Alice\\Downloads\\TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386\n"})}),"\n",(0,n.jsx)(i.p,{children:"I was able to obtain a list of static strings, and through searching the words \u2018http\u2019, \u2018com\u2019, and \u2018net\u2019 my search came back unsuccessful. With both of these methods employed I am confident that there were no URL\u2019s present in the malware, and it is an OS resource-based malware."}),"\n",(0,n.jsx)(i.h4,{id:"331-finding-malicious-artefacts-files",children:"3.3.1 Finding Malicious Artefacts: Files"}),"\n",(0,n.jsx)(i.p,{children:"File artefacts were obtained through the use of floss commands and pestudio, whereby my objective was to discover any deliberately obfuscated files that needed to be encoded. These types of tactics can lead to a high entropy which is an indicator that a file is malware. In practice, when the entropy values are higher than expected (closer to the value 8), there is an assumption of unnecessary complexity occurring within the sample. With an entropy of up to 6.67 (pictured in Figure 6), alongside the encoded strings utilising floss, we can see that the sample is displaying characteristics of malware."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware7.png",alt:"Malware Analysis 7",style:{width:"100%",maxWidth:"200px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 7: Floss decoded strings"})]}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware8.png",alt:"Malware Analysis 8",style:{width:"100%",maxWidth:"400px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 8: Entropy values within the sample"})]}),"\n",(0,n.jsx)(i.p,{children:"Through pestudio, we can identify the particular libraries that give the sample certain capabilities and within Figure 9, it should be noted that there are many libraries that have a concerning number of imports, with KERNEL32.dll being the highest at 25. Upon further inspection into these imports, we have a list of \u2018blacklisted\u2019 imports (pictured in Figure 10). It must be noted that these don\u2019t inherently confirm whether a file is malicious, however it does explicitly indicate that the sample is calling functions that could be used to perform malicious activities. These are denoted by the \u2018flag\u2019 indicator within pestudio."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware9.png",alt:"Malware Analysis 9",style:{width:"100%",maxWidth:"1000px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 9: Libraries that are being called within the sample"})]}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware10.png",alt:"Malware Analysis 10",style:{width:"100%",maxWidth:"200px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 10: Flagged imports from KERNEL32.dll, and ADVAPI32.dll"})]}),"\n",(0,n.jsx)(i.p,{children:"Based on my analysis in pestudio, below is a list of strings that whilst they may not be malicious inherently could be used for malicious activities:"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"WinBomConfigureWindowsFirewall"}),"\n",(0,n.jsx)(i.code,{children:"WinBomConfigureHomeNet"}),"\n",(0,n.jsx)(i.code,{children:"ReleaseSingletons"}),"\n",(0,n.jsx)(i.code,{children:"IcfSubNetsToString"}),"\n",(0,n.jsx)(i.code,{children:"IcfSubNetsIsStringValid"}),"\n",(0,n.jsx)(i.code,{children:"IcfSubNetsGetScope"}),"\n",(0,n.jsx)(i.code,{children:"IcfSetServicePermission"}),"\n",(0,n.jsx)(i.code,{children:"IcfSetProfile"}),"\n",(0,n.jsx)(i.code,{children:"IcfRemoveDisabledAuthorizedApp"}),"\n",(0,n.jsx)(i.code,{children:"IcfRefreshPolicy"}),"\n",(0,n.jsx)(i.code,{children:"IcfOpenFileSharingPorts"}),"\n",(0,n.jsx)(i.code,{children:"IcfOpenDynamicFwPortWithoutSocket"}),"\n",(0,n.jsx)(i.code,{children:"IcfOpenDynamicFwPort"}),"\n",(0,n.jsx)(i.code,{children:"IcfIsPortAllowed"}),"\n",(0,n.jsx)(i.code,{children:"IcfIsIcmpTypeAllowed"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetTickets"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetProfile"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetOperationalMode"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetDynamicFwPorts"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetCurrentProfileType"}),"\n",(0,n.jsx)(i.code,{children:"IcfGetAdapters"}),"\n",(0,n.jsx)(i.code,{children:"IcfFreeTickets"}),"\n",(0,n.jsx)(i.code,{children:"IcfFreeString"}),"\n",(0,n.jsx)(i.code,{children:"IcfFreeProfile"}),"\n",(0,n.jsx)(i.code,{children:"IcfFreeDynamicFwPorts"}),"\n",(0,n.jsx)(i.code,{children:"IcfFreeAdapters"}),"\n",(0,n.jsx)(i.code,{children:"IcfDisconnect"}),"\n",(0,n.jsx)(i.code,{children:"IcfConnect"}),"\n",(0,n.jsx)(i.code,{children:"IcfCloseDynamicFwPort"}),"\n",(0,n.jsx)(i.code,{children:"IcfCheckAppAuthorization"}),"\n",(0,n.jsx)(i.code,{children:"IcfChangeNotificationDestroy"}),"\n",(0,n.jsx)(i.code,{children:"IcfChangeNotificationCreate"}),"\n",(0,n.jsx)(i.code,{children:"HNetSharingAndFirewallSettingsDlg"}),"\n",(0,n.jsx)(i.code,{children:"HNetSharedAccessSettingsDlg"}),"\n",(0,n.jsx)(i.code,{children:"HNetSetShareAndBridgeSettings"}),"\n",(0,n.jsx)(i.code,{children:"HNetGetSharingServicesPage"}),"\n",(0,n.jsx)(i.code,{children:"HNetGetShareAndBridgeSettings"}),"\n",(0,n.jsx)(i.code,{children:"HNetGetFirewallSettingsPage"}),"\n",(0,n.jsx)(i.code,{children:"HNetFreeSharingServicesPage"}),"\n",(0,n.jsx)(i.code,{children:"HNetFreeFirewallLoggingSettings"}),"\n",(0,n.jsx)(i.code,{children:"HNetDeleteRasConnection"}),"\n",(0,n.jsx)(i.code,{children:"DllUnregisterServer*"}),"\n",(0,n.jsx)(i.code,{children:"DllRegisterServer*"}),"\n",(0,n.jsx)(i.code,{children:"DllGetClassObject*"}),"\n",(0,n.jsx)(i.code,{children:"DllCanUnloadNow*"}),"\n",(0,n.jsx)(i.code,{children:"AlgUninstall* "}),"(Application Layer Gateway protocols, could enable access to firewall manipulation and network communication.)"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Windows Operating System functions"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This list provides an insight into the custom functions that this sample has within its code."}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"IcfSubNetsGetScope"})," implies that the sample may be attempting to scrape for IP and network information."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"IcfRemoveDisabledAuthorizedApp"})," implies that the sample may remove authorised applications, and given the network communication focus of this sample it is safe to assume that this may be relating to Windows Firewall."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"IcfOpenFileSharingPorts"})," implies the opening of file sharing protocols, which may be used to propagate the malware across a network."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"IcfGetAdapters"})," implies the retrieval of adapters or interfaces within the infected system."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"HNetDeleteRasConnection"})," implies the removal of remote access connection, which could be used to disconnect or remove VPNs to avoid detection."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"DllUnregisterServer"})," and ",(0,n.jsx)(i.strong,{children:"DllRegisterServer"})," indicates the registering and unregistering of COM object registration information from the Windows Registry."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"The insights above suggest that whilst calling system .dll libraries may not be malicious there are still malicious functions that are being used within the sample. The implication of giving privileged access to modify network settings, and read data for sensitive information are all indicators of a malicious program. The call to DllUnregisterServer and DllRegisterServer is especially suspicious, as this could lead to implications with the systems functionality entirely as the Windows Registry is a crucial part of the Windows Operating System."}),"\n",(0,n.jsxs)(i.p,{children:["During the analysis within pestudio, I discovered more alarming functions by which the program had flagged and provided additional information with regards to their legitimate functions.\n",(0,n.jsx)(i.code,{children:"Sandbox Evasion - Sleep"}),"\n",(0,n.jsx)(i.code,{children:"System Time Discovery - GetTickCount"}),"\n",(0,n.jsx)(i.code,{children:"System Time Discovery - GetSystemTimeAsFileTime"}),"\n",(0,n.jsx)(i.code,{children:"System Information Discovery - ExpandEnvironmentStrings"}),"\n",(0,n.jsx)(i.code,{children:"Process Discovery - GetCurrentThreadId"}),"\n",(0,n.jsx)(i.code,{children:"Process Discovery - GetCurrentProcessId"}),"\n",(0,n.jsx)(i.code,{children:"Process Discovery - GetCurrentProcess"}),"\n",(0,n.jsx)(i.code,{children:"Process Injection - VirtualProtect"}),"\n",(0,n.jsx)(i.code,{children:"Obfuscated Files or Information - CryptImportKey"}),"\n",(0,n.jsx)(i.code,{children:"Obfuscated Files or Information - CryptDecrypt"}),"\n",(0,n.jsx)(i.code,{children:"Obfuscated Files or Information - CryptAcquireContext"})]}),"\n",(0,n.jsx)(i.p,{children:"This list demonstrates a myriad of time-based behaviour such as GetTickCount, and GetSystemTimeAsFileTime, which may be utilised to execute or delay functions at a particular time to maintain persistence on the infected system. Functions such as CryptImportKey, CryptDecrypt, and CryptAcquireContext heavily imply more malicious activities as these functions refer directly to the Cryptography API (Crypto API) as outlined in Figure 9. This becomes concerning as this directly involves the potential to encrypt and decrypt data, as well as performing tasks that are more cryptographic in nature."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware11.png",alt:"Malware Analysis 11",style:{width:"100%",maxWidth:"700px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 11: Chart of CryptoAPI tasks"})]}),"\n",(0,n.jsx)(i.h4,{id:"332-finding-malicious-artefacts-packing",children:"3.3.2 Finding Malicious Artefacts: Packing"}),"\n",(0,n.jsx)(i.p,{children:"My next process was exploring packing artefacts, whereby I used pestudio to look more closely at the sections of the sample. Typically, a packed file will show irregularities within the .text raw-size and virtual-size. If these numbers indicate that the virtual-size is much larger than thse raw-size this can indicate that the file has been deliberately packed or compressed to evade detection. As pictured in Figure 11, there is only a small difference between the raw-size and the virtual-size which implies that the sample has not been compressed."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware12.png",alt:"Malware Analysis 12",style:{width:"100%",maxWidth:"400px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 12: \u2018Sections\u2019 tab within pestudio to evaluate raw and virtual address size"})]}),"\n",(0,n.jsx)(i.p,{children:"In order to cross check this, I imported the sample into Exeinfo.PE and studied the \u2018Lamer Info - Help Hint - Unpack Info\u2019 section (pictured in Figure 11) of the interface to reveal that there is no detected compression happening within the sample."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware13.png",alt:"Malware Analysis 13",style:{width:"100%",maxWidth:"500px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 13: Exeinfo PE interface displaying results of analysis"})]}),"\n",(0,n.jsx)(i.h4,{id:"333-finding-malicious-artefacts-code",children:"3.3.3 Finding Malicious Artefacts: Code"}),"\n",(0,n.jsx)(i.p,{children:"After confirming that the sample was likely not packed, I began my analysis of code artefacts through the use of cmder, and the capa commands in order to gain insight into malware behaviour. Through this command:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"capa C:\\Users\\Alice\\Downloads\\TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386\n"})}),"\n",(0,n.jsx)(i.p,{children:"This provided me with some fascinating insights with regards to the functions I discovered earlier in my analysis. Malicious activity includes decrypting and encrypting data, reading files, allocation of memory, and manipulating keys all of which indicate that this sample is displaying malicious intent (as pictured in Figure 14)."}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware14.png",alt:"Malware Analysis 14",style:{width:"100%",maxWidth:"800px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 14: \u2018capa\u2019 analysis output data"})]}),"\n",(0,n.jsxs)(i.p,{children:["A further analysis into this sample through the use of the \u2018capa -v\u2019 and capa -vv\u2019 commands, pictured in Figure 14, we can observe that the functions ",(0,n.jsx)(i.em,{children:"CryptAcquireContext"}),", ",(0,n.jsx)(i.em,{children:"CryptDecrypt"}),", and ",(0,n.jsx)(i.em,{children:"CryptImportKey"})," (amongst many others) are deliberately used as methods of obfuscation and evasion  therefore justifying its existence as malware in lieu of a regular program."]}),"\n",(0,n.jsxs)("div",{style:{textAlign:"center"},children:[(0,n.jsx)("img",{src:"malware15.png",alt:"Malware Analysis 15",style:{width:"100%",maxWidth:"800px",height:"auto"}}),(0,n.jsx)("br",{}),(0,n.jsx)("em",{children:"Figure 15: \u2018capa -vv\u2019 analysis output data"})]}),"\n",(0,n.jsx)(i.h2,{id:"4-conclusion",children:"4. Conclusion"}),"\n",(0,n.jsx)(i.p,{children:"The objective for this research paper was to determine six important factors, which are as follows:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"What is the file type?"}),"\n",(0,n.jsx)(i.li,{children:"Does the file have a packer?"}),"\n",(0,n.jsx)(i.li,{children:"Are there any suspicious strings in the file?"}),"\n",(0,n.jsx)(i.li,{children:"Are there any encoded strings in the file?"}),"\n",(0,n.jsx)(i.li,{children:"If the malware does have a packer, how do we unpack the file?"}),"\n",(0,n.jsx)(i.li,{children:"Is the file malware?"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"This particular sample was an executable file as we can identify the \u20184D\u2019, \u20185A\u2019 values in addition to the \u2018MZ\u2019 header indicator. This sample does not have a packer denoted by the proximity between its raw-size and its virtual-size, 7680 and 7435 respectively. I cross checked this with the Exeinfo PE program that concluded that no unpacking was necessary for the sample which indicates that the sample is not packed. This sample did contain some very suspicious strings such as CryptAcquireContext, CryptDecrypt, CryptImportKey, DllUnregisterServer and DllRegisterServer that allude to more malicious activities. As this sample does not have a packer, I did not need to unpack the sample. However, if the sample did have a packer I would have utilised Exeinfo PE to obtain instructions for how to unpack the file and observe its contents. My sample, otherwise known as Equation: Triple Fantasy is malware, which is highlighted through its clear malicious intent, use of obscure custom functions to initiate concerning operations within the system, and code that is borderline unreadable by humans."}),"\n",(0,n.jsx)(i.h2,{id:"41-references",children:"4.1 References"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["Fox, N. (2021). PeStudio Overview: Setup, Tutorial and Tips. [online] ",(0,n.jsx)(i.a,{href:"http://www.varonis.com",children:"www.varonis.com"}),". Available at: ",(0,n.jsx)(i.a,{href:"https://www.varonis.com/blog/pestudio",children:"https://www.varonis.com/blog/pestudio"}),". [Accessed on 10 Apr. 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["alvinashcraft (2021). CryptoAPI System Architecture - Win32 apps. [online] learn.microsoft.com. Available at: ",(0,n.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/win32/seccrypto/cryptoapi-system-architecture",children:"https://learn.microsoft.com/en-us/windows/win32/seccrypto/cryptoapi-system-architecture"}),". [Accessed on 10 Apr. 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["Microsoft (2024). DllRegisterServer function (olectl.h) - Win32 apps. [online] learn.microsoft.com. Available at: ",(0,n.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllregisterserver",children:"https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllregisterserver"})," [Accessed 10 Apr. 2024]."]}),"\n",(0,n.jsxs)(i.li,{children:["Microsoft (2024). DllUnregisterServer function (olectl.h) - Win32 apps. [online] learn.microsoft.com. Available at: ",(0,n.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllunregisterserver",children:"https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllunregisterserver"})," [Accessed 10 Apr. 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["Kessler, G. (2019). File Signatures. [online] Garykessler.net. Available at: ",(0,n.jsx)(i.a,{href:"https://www.garykessler.net/library/file_sigs.html",children:"https://www.garykessler.net/library/file_sigs.html"}),". [Accessed 10 Apr. 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["malwarenailed, Suspicious Strings in Memory. (8 Jun. 2019). Suspicious Strings in Memory. [online] Available at: ",(0,n.jsx)(i.a,{href:"https://malwarenailed.blogspot.com/2019/06/suspicious-strings-in-memory.html",children:"https://malwarenailed.blogspot.com/2019/06/suspicious-strings-in-memory.html"})," [Accessed 5 Apr. 2024]."]}),"\n",(0,n.jsxs)(i.li,{children:["Depaul.edu. (2023). Available at: ",(0,n.jsx)(i.a,{href:"https://condor.depaul.edu/glancast/443class/docs/vbox_host-only_setup.html#:~:text=A%20VirtualBox%20host%2Donly%20adapter",children:"https://condor.depaul.edu/glancast/443class/docs/vbox_host-only_setup.html#:~:text=A%20VirtualBox%20host%2Donly%20adapter"}),". [Accessed Apr. 5 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["Candan BOLUKBAS (2017). Malware Analysis Part #1: Basic Static Analysis. YouTube. Available at: ",(0,n.jsx)(i.a,{href:"https://www.youtube.com/watch?v=SIem8ZIe1xk",children:"https://www.youtube.com/watch?v=SIem8ZIe1xk"}),". [Accessed Apr. 5 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["VirusTotal (2024). VirusTotal. [online] Virustotal.com. Available at: ",(0,n.jsx)(i.a,{href:"https://www.virustotal.com/gui/home/upload",children:"https://www.virustotal.com/gui/home/upload"}),". [Accessed 5 Apr. 2024]"]}),"\n",(0,n.jsxs)(i.li,{children:["Techtuber, S. ",(0,n.jsx)(i.a,{href:"http://www.youtube.com",children:"www.youtube.com"}),". (3 May. 2023). Static Malware Analysis using PEStudio. [online] Available at: ",(0,n.jsx)(i.a,{href:"https://www.youtube.com/watch?v=Kz7Aw-2sCWI",children:"https://www.youtube.com/watch?v=Kz7Aw-2sCWI"}),". [Accessed 5 Apr. 2024]."]}),"\n",(0,n.jsxs)(i.li,{children:["ytisf. (15 Dec. 2014). theZoo/malware/Binaries/EquationGroup.TripleFantasy at master \xb7 ytisf/theZoo. [online] Available at: ",(0,n.jsx)(i.a,{href:"https://github.com/ytisf/theZoo/tree/master/malware/Binaries/EquationGroup.TripleFantasy",children:"https://github.com/ytisf/theZoo/tree/master/malware/Binaries/EquationGroup.TripleFantasy"})," [Accessed 5 Apr. 2024]."]}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);